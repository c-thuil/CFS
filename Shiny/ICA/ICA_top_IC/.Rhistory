launchShiny <- function(
mode = "open",
maxFileSize = 15000,
file_to_load = NULL,
welcome_message = NULL,
projections_show_hover_info = TRUE,
...
){
##--------------------------------------------------------------------------##
## Create global variable with options that need to be available inside the
## Shiny app.
##--------------------------------------------------------------------------##
Shiny.options <<- list(
"mode" = mode,
"file_to_load" = file_to_load,
"welcome_message" = welcome_message,
"shiny_root" = "/home/c_thuilliez/Desktop/scRNAS_CT/Shiny/",
"projections_show_hover_info" = projections_show_hover_info
)
##--------------------------------------------------------------------------##
## Allow upload of files up to 800 MB.
##--------------------------------------------------------------------------##
options(shiny.maxRequestSize = maxFileSize * 1024^2)
##--------------------------------------------------------------------------##
## Load server and UI functions.
##--------------------------------------------------------------------------##
source(
"/home/c_thuilliez/Desktop/scRNAS_CT/Shiny/shiny_UI.R",
local = TRUE
)
source(
"/home/c_thuilliez/Desktop/scRNAS_CT/Shiny/shiny_server.R",
local = TRUE
)
##--------------------------------------------------------------------------##
## Launch Shiny.
##--------------------------------------------------------------------------##
message(
paste0(
'##---------------------------------------------------------------------------##\n',
'## Launching Shiny\n',
'##---------------------------------------------------------------------------##'
)
)
shiny::shinyApp(
ui = ui,
server = server,
...
)
}
data = readRDS('/home/c_thuilliez/Desktop/Work/output/Spatial_PDX/MAP177_PDX_PT_S17_h/data.RDS')
library(igraph)
library(CellChat)
library(tidyverse)
library(Seurat)
library(pheatmap)
#library(spatialEco)
# library(Cairo)
library(e1071)
# library(patchwork)
library(ggalluvial)
library(NMF)
# library(copykat)
library(enrichR)
library(ape)
#library(Rfast2)
#library(harmony)
#library(furrr)
library(copykat)
library(diffusionMap)
library(destiny)
library(glmnet)
#
library(stats)
library(interp)
library(MASS)
library(scatterpie)
#bayesspace
library(SingleCellExperiment)
library(ggplot2)
library(BayesSpace)
library(Matrix)
library(geometry)
options(browser = "firefox")
library(corrplot)
setEnrichrSite("Enrichr")
dbs <- listEnrichrDbs()
websiteLive <- TRUE
n_cores = 8
future::plan("multicore", workers = n_cores)
list_gene <-  purrr::map(GeneStatICA$Contrib_gene[nics],function(.x){x<-.x %>% arrange(desc(abs(Sig))) %>% head(n=ngenes) ;return(x$gene)}) %>% unlist %>% unique
GeneStatICA=data@misc$GeneAndStat
nics="IC_1"
ngenes=10
list_gene <-  purrr::map(GeneStatICA$Contrib_gene[nics],function(.x){x<-.x %>% arrange(desc(abs(Sig))) %>% head(n=ngenes) ;return(x$gene)}) %>% unlist %>% unique
paletteLength <- 50
myColor <- colorRampPalette(c("violet","black","yellow"))(paletteLength)
data_heat=data@reductions$ica@feature.loadings[as.matrix(list_gene),]
myBreaks <- c(seq(min(data_heat), 0, length.out=ceiling(paletteLength/2) + 1),
seq(max(data_heat)/paletteLength, max(data_heat), length.out=floor(paletteLength/2)))
Plot the heatmap
data@misc[["top_gene_ICA"]] <- data_heat
pheatmap(data_heat,clustering_method = "ward.D",color=myColor, breaks=myBreaks,,clustering_distance_cols = "correlation",width = 15,height=30)
p <- pheatmap(data_heat,clustering_method = "ward.D",color=myColor, breaks=myBreaks,,clustering_distance_cols = "correlation",width = 15,height=30)
p
clear
clear()
p
p
launchShiny()
launchShiny()
## start building the plot
list_gene <-  purrr::map(Launch_analysis()@misc$GeneAndStat$Contrib_gene[nics],function(.x){x<-.x %>% arrange(desc(abs(Sig))) %>% head(n=ngenes) ;return(x$gene)}) %>% unlist %>% unique
## start building the plot
list_gene <-  purrr::map(data@misc$GeneAndStat$Contrib_gene[nics],function(.x){x<-.x %>% arrange(desc(abs(Sig))) %>% head(n=ngenes) ;return(x$gene)}) %>% unlist %>% unique
list_gene
launchShiny()
launchShiny()
launchShiny()
launchShiny()
launchShiny()
launchShiny()
