library(igraph)
library(CellChat)
library(tidyverse)
library(Seurat)
library(pheatmap)
#library(spatialEco)
# library(Cairo)
library(e1071)
# library(patchwork)
library(ggalluvial)
library(NMF)
# library(copykat)
library(enrichR)
library(ape)
#library(Rfast2)
#library(harmony)
#library(furrr)
library(copykat)
library(diffusionMap)
library(destiny)
library(glmnet)
#
library(stats)
library(interp)
library(MASS)
library(scatterpie)
#bayesspace
library(SingleCellExperiment)
library(ggplot2)
library(BayesSpace)
library(Matrix)
library(geometry)
### subcluster
library(slingshot)
library(glmnet)
options(browser = "firefox")
library(corrplot)
library(phateR)
setEnrichrSite("Enrichr")
dbs <- listEnrichrDbs()
websiteLive <- TRUE
n_cores = 8
future::plan("multicore", workers = n_cores)
source('/home/c_thuilliez/Desktop/scRNAS_CT/R/Cluster_ICA.R')
source('/home/c_thuilliez/Desktop/scRNAS_CT/R/Copykat.R')
source('/home/c_thuilliez/Desktop/scRNAS_CT/R/DoHeatmapICA.R')
source('/home/c_thuilliez/Desktop/scRNAS_CT/R/ICGeneAndStats.R')
source('/home/c_thuilliez/Desktop/scRNAS_CT/R/Markers_Clusters_ICA.R')
source('/home/c_thuilliez/Desktop/scRNAS_CT/R/Minor_functions.R')
source('/home/c_thuilliez/Desktop/scRNAS_CT/R/prepare_data.R')
source('/home/c_thuilliez/Desktop/scRNAS_CT/R/RunICA.R')
source('/home/c_thuilliez/Desktop/scRNAS_CT/R/Show_IC_and_Enrich.R')
source('/home/c_thuilliez/Desktop/scRNAS_CT/R/saveForShiny.R')
source('/home/c_thuilliez/Desktop/scRNAS_CT/R/DoHeatmapICA_S.R')
source('/home/c_thuilliez/Desktop/scRNAS_CT/R/Show_IC_and_Enrich_S.R')
source('/home/c_thuilliez/Desktop/scRNAS_CT/R/launchShiny.R')
launchShiny()
launchShiny()
launchShiny()
launchShiny()
data@reductions$ica@cell.embeddings
data <- readRDS("/home/c_thuilliez/Desktop/Work/output/Spatial_PDX/MAP177_PDX_PT_S17_h/data.RDS")
data@reductions$ica@cell.embeddings
print(c("Hello"))
c("Hello","Goodbye")
paste(c("Hello","Goodbye"),",")
paste0(c("Hello","Goodbye"),",")
paste0(c("Hello","Goodbye"))
paste(c("Hello","Goodbye"))
paste(c("Hello","Goodbye"),collapse = ",")
data@reductions$ica@cell.embeddings
launchShiny()
launchShiny()
type = "IFN+TNF signaling+hypoxia+HSP"
name = type
l=length(type)
data@misc$annotation
type = "IC_19"
l=length(type)
if (l > 1){
ic_types=values$UMAP@reductions$ica@cell.embeddings[,type]
ic_types<-apply(ic_types,2,function(x){x=ifelse(x<=0,0,x); return(x)})
sum_IC<-apply(ic_types,2,function(x){x=x/sum(x); return(x)})
sum_IC=sqrt((rowSums(sum_IC)/max(rowSums(sum_IC))))
ic_types<-apply(ic_types,1,function(x){x/sum(x); return(x)})
ic_types<-cbind(values$UMAP@reductions$umap@cell.embeddings,t(ic_types)) %>%  cbind(.,sum_IC)
grid=interp(ic_types[,'UMAP_1'],ic_types[,'UMAP_2'],ic_types[,'sum_IC'])
griddf <- data.frame(x = rep(grid$x, ncol(grid$z)),
y = rep(grid$y, each = nrow(grid$z)),
z = as.numeric(grid$z))
griddf$z2=ifelse(griddf$z<quantile(griddf$z,na.rm = TRUE,probs = seq(0, 1, 1/10))[2],0,griddf$z)
# Create plotly object
fig <- plot_ly(type = 'scatter',
mode='markers'
)
# Add density
if (input$Plot_contour_density == TRUE){
p1 <- ggplot( data = ic_types,aes(x = UMAP_1, y = UMAP_2)) +
annotation_raster(img,xmin = 0,xmax = Inf,ymin = 0,ymax = Inf)+
geom_contour(data = griddf,aes(x = x, y = y , z=z2),breaks = input$Plot_thresh_density)  +
coord_equal()+
theme_void()
fig = ggplotly(p1)
} else {
fig <- fig %>%
add_trace(
type = "contour",
x = griddf$x,
y = griddf$y,
z = griddf$z2,
showlegend = T,
contours = list(
end = 1,
size = 0.1,
start = input$Plot_thresh_density
),
opacity=1
)
fig <- fig %>% colorbar(title = "UMAP\ndensity")
}
# ADD umap
for (i in 0:length(summary(values$UMAP@meta.data[["seurat_clusters"]]))-1){
fig <- fig %>%
add_trace(
x = values$UMAP[["umap"]]@cell.embeddings[which(values$UMAP@meta.data[["seurat_clusters"]]==i),1],
y = values$UMAP[["umap"]]@cell.embeddings[which(values$UMAP@meta.data[["seurat_clusters"]]==i),2],
name = i,
marker = list(
color = palette()[i+1],
size = 5
),
showlegend = T,
text = i,
customdata = rownames(values$UMAP@meta.data)[which(values$UMAP@meta.data[["seurat_clusters"]]==i)],
hovertemplate = paste0("Cell : %{customdata}<br>",
"Cluster : %{text}",
"<extra></extra>"),
opacity=input$Plot_thresh_alpha_density
)
}
fig <- fig %>% layout(xaxis=list(showgrid = FALSE, showticklabels=FALSE),
yaxis = list(showgrid = FALSE, showticklabels=FALSE),
autosize = TRUE
)
} else {
ic_types=values$UMAP@reductions$ica@cell.embeddings[,type]
# Create plotly object
fig <- plot_ly(type = 'scatter',
mode='markers'
)
# ADD umap
fig <- fig %>%
add_trace(
x = values$UMAP[["umap"]]@cell.embeddings[,1],
y = values$UMAP[["umap"]]@cell.embeddings[,2],
name = name,
marker = list(
color = ic_types,
size = 5
),
showlegend = T,
text = ic_types,
customdata = rownames(values$UMAP@meta.data),
hovertemplate = paste0("Cell : %{customdata}<br>",
"Level : %{text}",
"<extra></extra>"),
opacity=input$Plot_thresh_alpha_density
)
fig <- fig %>% layout(xaxis=list(showgrid = FALSE, showticklabels=FALSE),
yaxis = list(showgrid = FALSE, showticklabels=FALSE),
autosize = TRUE
)
}
ic_types=values$UMAP@reductions$ica@cell.embeddings[,type]
ic_types=data@reductions$ica@cell.embeddings[,type]
# Create plotly object
fig <- plot_ly(type = 'scatter',
mode='markers'
)
# ADD umap
fig <- fig %>%
add_trace(
x = data[["umap"]]@cell.embeddings[,1],
y = data[["umap"]]@cell.embeddings[,2],
name = name,
marker = list(
color = ic_types,
size = 5
),
showlegend = T,
text = ic_types,
customdata = rownames(data@meta.data),
hovertemplate = paste0("Cell : %{customdata}<br>",
"Level : %{text}",
"<extra></extra>"),
opacity=input$Plot_thresh_alpha_density
)
# ADD umap
fig <- fig %>%
add_trace(
x = data[["umap"]]@cell.embeddings[,1],
y = data[["umap"]]@cell.embeddings[,2],
name = name,
marker = list(
color = ic_types,
size = 5
),
showlegend = T,
text = ic_types,
customdata = rownames(data@meta.data),
hovertemplate = paste0("Cell : %{customdata}<br>",
"Level : %{text}",
"<extra></extra>")
)
fig <- fig %>% layout(xaxis=list(showgrid = FALSE, showticklabels=FALSE),
yaxis = list(showgrid = FALSE, showticklabels=FALSE),
autosize = TRUE
)
fig
SpatialFeaturePlot(data,IC_19)
SpatialFeaturePlot(data,'IC_19')
ic_types=values$data@reductions$ica@cell.embeddings[,type]
type
ic_types=data@reductions$ica@cell.embeddings[,type]
# Create plotly object
fig <- plot_ly(type = 'scatter',
mode='markers',
source = "B"
)
# Add spot
fig <- fig %>%
add_trace(
x = GetTissueCoordinates(values$data)[,"imagecol"],
y = GetTissueCoordinates(values$data)[,"imagerow"],
marker = list(
color = ic_types
),
showlegend = F
)
# Add spot
fig <- fig %>%
add_trace(
x = GetTissueCoordinates(data)[,"imagecol"],
y = GetTissueCoordinates(data)[,"imagerow"],
marker = list(
color = ic_types
),
showlegend = F
)
fig
fig <- fig %>% add_trace(type="image", source = raster2uri(raster::as.raster(values$data@images$slice1@image)), hoverinfo = "skip")
# Create plotly object
fig <- plot_ly(type = 'scatter',
mode='markers',
source = "B"
)
# Add spot
fig <- fig %>%
add_trace(
x = GetTissueCoordinates(data)[,"imagecol"],
y = GetTissueCoordinates(data)[,"imagerow"],
name = name,
marker = list(
color = ic_types
),
showlegend = T,
text = ic_types,
customdata = rownames(data@meta.data),
hovertemplate = paste0("Cell : %{customdata}<br>",
"Level : %{text}",
"<extra></extra>"),
opacity=input$Plot_thresh_alpha_density
)
# Add spot
fig <- fig %>%
add_trace(
x = GetTissueCoordinates(data)[,"imagecol"],
y = GetTissueCoordinates(data)[,"imagerow"],
name = name,
marker = list(
color = ic_types
),
showlegend = T,
text = ic_types,
customdata = rownames(data@meta.data),
hovertemplate = paste0("Cell : %{customdata}<br>",
"Level : %{text}",
"<extra></extra>")
)
fig <- fig %>% add_trace(type="image", source = raster2uri(raster::as.raster(data@images$slice1@image)), hoverinfo = "skip")
fig <- fig %>% layout(xaxis=list(showgrid = FALSE, showticklabels=FALSE),
yaxis = list(showgrid = FALSE, showticklabels=FALSE),
autosize = TRUE
)
fig
launchShiny()
type
ic_types=values$data@reductions$ica@cell.embeddings[,type]
ic_types=data@reductions$ica@cell.embeddings[,type]
ic_types
values = list()
values$annotation_for_output = list("IFN+TNF signaling+hypoxia+HSP" = "IC_19")
View(values)
type = values$annotation_for_output[[name]]
l=length(type)
ic_types=values$data@reductions$ica@cell.embeddings[,type]
ic_types=data@reductions$ica@cell.embeddings[,type]
# Create plotly object
fig <- plot_ly(type = 'scatter',
mode='markers',
source = "B"
)
# Add spot
fig <- fig %>%
add_trace(
x = GetTissueCoordinates(data)[,"imagecol"],
y = GetTissueCoordinates(data)[,"imagerow"],
name = name,
marker = list(
color = ic_types
),
showlegend = T,
text = ic_types,
customdata = rownames(data@meta.data),
hovertemplate = paste0("Cell : %{customdata}<br>",
"Level : %{text}",
"<extra></extra>"),
opacity=input$Plot_thresh_alpha_density
)
# Add spot
fig <- fig %>%
add_trace(
x = GetTissueCoordinates(data)[,"imagecol"],
y = GetTissueCoordinates(data)[,"imagerow"],
name = name,
marker = list(
color = ic_types
),
showlegend = T,
text = ic_types,
customdata = rownames(data@meta.data),
hovertemplate = paste0("Cell : %{customdata}<br>",
"Level : %{text}",
"<extra></extra>")
)
fig <- fig %>% add_trace(type="image", source = raster2uri(raster::as.raster(values$data@images$slice1@image)), hoverinfo = "skip")
fig <- fig %>% add_trace(type="image", source = raster2uri(raster::as.raster(data@images$slice1@image)), hoverinfo = "skip")
fig <- fig %>% layout(xaxis=list(showgrid = FALSE, showticklabels=FALSE),
yaxis = list(showgrid = FALSE, showticklabels=FALSE),
autosize = TRUE
)
fig
launchShiny()
