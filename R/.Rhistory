launchShiny()
launchShiny <- function(
mode = "open",
maxFileSize = 15000,
file_to_load = NULL,
welcome_message = NULL,
projections_show_hover_info = TRUE,
...
){
##--------------------------------------------------------------------------##
## Create global variable with options that need to be available inside the
## Shiny app.
##--------------------------------------------------------------------------##
Shiny.options <<- list(
"mode" = mode,
"file_to_load" = file_to_load,
"welcome_message" = welcome_message,
"shiny_root" = "/home/c_thuilliez/Desktop/scRNAS_CT/Shiny/",
"projections_show_hover_info" = projections_show_hover_info
)
##--------------------------------------------------------------------------##
## Allow upload of files up to 800 MB.
##--------------------------------------------------------------------------##
options(shiny.maxRequestSize = maxFileSize * 1024^2)
##--------------------------------------------------------------------------##
## Load server and UI functions.
##--------------------------------------------------------------------------##
source(
"/home/c_thuilliez/Desktop/scRNAS_CT/Shiny/shiny_UI.R",
local = TRUE
)
source(
"/home/c_thuilliez/Desktop/scRNAS_CT/Shiny/shiny_server.R",
local = TRUE
)
##--------------------------------------------------------------------------##
## Launch Shiny.
##--------------------------------------------------------------------------##
message(
paste0(
'##---------------------------------------------------------------------------##\n',
'## Launching Shiny\n',
'##---------------------------------------------------------------------------##'
)
)
shiny::shinyApp(
ui = ui,
server = server,
...
)
}
launchShiny()
launchShiny()
launchShiny()
launchShiny()
launchShiny()
launchShiny()
launchShiny()
launchShiny()
library(data.table)
launchShiny()
data = readRDS("/home/c_thuilliez/Desktop/Work/output/Spatial_PDX/MAP177_PDX_PT_S17_h/data.RDS")
row_names = names(data@misc)[grep('IC_', names(data@misc))]
data@misc$annotation = matrix(data = NA, nrow = length(row_names), ncol = 3)
rownames(data@misc$annotation) = row_names
colnames(data@misc$annotation) = c('Use','Type','Annotation')
data@misc$annotation
data@misc$annotation
as.data.table(data@misc$annotation)
rownames(data@misc$annotation) = row_names
as.data.table(data@misc$annotation)
data@misc$annotation = as.data.table(data@misc$annotation)
rownames(data@misc$annotation) = row_names
data@misc$annotation
View(data@misc$annotation)
rownames(data@misc$annotation) = row_names
View(data@misc$annotation)
row_names = names(data@misc)[grep('IC_', names(data@misc))]
data@misc$annotation = matrix(data = NA, nrow = length(row_names), ncol = 3)
rownames(data@misc$annotation) = row_names
colnames(data@misc$annotation) = c('Use','Type','Annotation')
data@misc$annotation
View(data@misc$annotation)
DT = as.data.table(values$Annotation[1,])
values$Annotation[1,]
data@misc$Annotation[1,]
data@misc$Annotation
row_names = names(data@misc)[grep('IC_', names(data@misc))]
data@misc$annotation = matrix(data = NA, nrow = length(row_names), ncol = 3)
rownames(data@misc$annotation) = row_names
colnames(data@misc$annotation) = c('Use','Type','Annotation')
data@misc$Annotation
data@misc$annotation
data@misc$annotation[1,]
data@misc$annotation[1,]
data@misc$annotation[1,1]
data@misc$annotation[1,]
data@misc$annotation[1:2,]
data@misc$annotation[1,]
datatable(DT, editable = list(target = 'cell', disable = list(columns = c(0))), class = 'cell-border stripe', colnames = c('IC' = 1))
datatable(data@misc$annotation[1,], editable = list(target = 'cell', disable = list(columns = c(0))), class = 'cell-border stripe', colnames = c('IC' = 1))
datatable(data@misc$annotation[1:2,], editable = list(target = 'cell', disable = list(columns = c(0))), class = 'cell-border stripe', colnames = c('IC' = 1))
datatable(data@misc$annotation[1,1:3], editable = list(target = 'cell', disable = list(columns = c(0))), class = 'cell-border stripe', colnames = c('IC' = 1))
datatable(data@misc$annotation[1,], editable = list(target = 'cell', disable = list(columns = c(0))), class = 'cell-border stripe', colnames = c('IC' = 1))
datatable(as.matrix(data@misc$annotation[1,]), editable = list(target = 'cell', disable = list(columns = c(0))), class = 'cell-border stripe', colnames = c('IC' = 1))
datatable(as.matrix(data@misc$annotation[1,], rownames="IC_1"), editable = list(target = 'cell', disable = list(columns = c(0))), class = 'cell-border stripe', colnames = c('IC' = 1))
datatable(as.matrix(data@misc$annotation[1,], rownames=c("IC_1")), editable = list(target = 'cell', disable = list(columns = c(0))), class = 'cell-border stripe', colnames = c('IC' = 1))
datatable(as.matrix(data@misc$annotation[1,], rownames=c("IC_1","2","3")), editable = list(target = 'cell', disable = list(columns = c(0))), class = 'cell-border stripe', colnames = c('IC' = 1))
datatable(as.data.table(data@misc$annotation[1,]), editable = list(target = 'cell', disable = list(columns = c(0))), class = 'cell-border stripe', colnames = c('IC' = 1))
datatable(as.matrix(data@misc$annotation[1,]), editable = list(target = 'cell', disable = list(columns = c(0))), class = 'cell-border stripe', colnames = c('IC' = 1))
datatable(as.data.table(data@misc$annotation[1,]), editable = list(target = 'cell', disable = list(columns = c(0))), class = 'cell-border stripe', colnames = c('IC' = 1))
datatable(as.data.table(data@misc$annotation[1,], keep.rownames=TRUE), editable = list(target = 'cell', disable = list(columns = c(0))), class = 'cell-border stripe', colnames = c('IC' = 1))
datatable(as.data.table(data@misc$annotation[1,], keep.rownames=TRUE, na.rm=FALSE), editable = list(target = 'cell', disable = list(columns = c(0))), class = 'cell-border stripe', colnames = c('IC' = 1))
values$Annotation[1,]
matrix(values$Annotation[1,], nrow = 1, ncol = 3)
matrix(values$Annotation, nrow = 1, ncol = 3)
values = list()
values$Annotation = data@misc$annotation
matrix(values$Annotation[1,], nrow = 1, ncol = 3)
DT = matrix(values$Annotation[1,], nrow = 1, ncol = 3, dimnames = list(c("X"), c("A","B","C")))
DT
DT = matrix(values$Annotation[1,], nrow = 1, ncol = 3, dimnames = list(c("IC_1"), c('Use','Type','Annotation')))
datatable(DT, editable = list(target = 'cell', disable = list(columns = c(0))), class = 'cell-border stripe', colnames = c('IC' = 1))
matrix(values$Annotation["IC_1",], nrow = 1, ncol = 3, dimnames = list(c(input$IC_choice), c('Use','Type','Annotation')))
matrix(values$Annotation["IC_1",], nrow = 1, ncol = 3, dimnames = list(c("IC_1"), c('Use','Type','Annotation')))
launchShiny()
launchShiny()
launchShiny()
launchShiny()
launchShiny()
launchShiny()
values$Annotation
values$Annotation[,'Type']
as.vector(values$Annotation[,'Type'])
unique(as.vector(values$Annotation[,'Type']))
launchShiny()
launchShiny()
launchShiny()
View(data)
data@meta.data
data@meta.data$seurat_clusters
unique(data@meta.data$seurat_clusters)
launchShiny()
unique(values$data@meta.data$seurat_clusters)
unique(data@meta.data$seurat_clusters)
order(unique(data@meta.data$seurat_clusters))
sort(unique(data@meta.data$seurat_clusters))
launchShiny()
launchShiny()
launchShiny()
launchShiny()
View(data)
launchShiny()
launchShiny()
View(data)
View(values)
launchShiny()
data_2 <- readRDS("/home/c_thuilliez/Desktopdata.RDS")
data_2 <- readRDS("/home/c_thuilliez/Desktop/data.RDS")
View(data_2)
View(data)
View(data_2)
View(data)
View(data_2)
View(data)
View(data_2)
data_2@meta.data
View(data_2@meta.data)
data = readRDS("/home/c_thuilliez/Desktop/Work/output/Spatial_Patient/Z_Slide2_S2/data.RDS")
View(data)
View(data_2)
SpatialDimPlot(sata_2)
SpatialDimPlot(data_2)
SpatialDimPlot(data)
SpatialDimPlot(data_2)
data_2@misc$annotation
DimPlot(data)
DimPlot(data_2)
launchShiny()
launchShiny()
data_2 = readRDS("/home/c_thuilliez/Desktop/data.RDS")
DimPlot(data_2)
DimPlot(data)
DimPlot(data_2)
data_2@misc$annotation
launchShiny()
server <- function(input, output) {
output$plot <- renderPlot({
input$goPlot # Re-run when button is clicked
# Create 0-row data frame which will be used to store data
dat <- data.frame(x = numeric(0), y = numeric(0))
withProgress(message = 'Making plot', value = 0, {
# Number of times we'll go through the loop
n <- 10
for (i in 1:n) {
# Each time through the loop, add another row of data. This is
# a stand-in for a long-running computation.
dat <- rbind(dat, data.frame(x = rnorm(1), y = rnorm(1)))
# Increment the progress bar, and update the detail text.
incProgress(1/n, detail = paste("Doing part", i))
# Pause for 0.1 seconds to simulate a long computation.
Sys.sleep(0.1)
}
})
plot(dat$x, dat$y)
})
}
ui <- shinyUI(basicPage(
plotOutput('plot', width = "300px", height = "300px"),
actionButton('goPlot', 'Go plot')
))
shinyApp(ui = ui, server = server)
# This function computes a new data set. It can optionally take a function,
# updateProgress, which will be called as each row of data is added.
compute_data <- function(updateProgress = NULL) {
# Create 0-row data frame which will be used to store data
dat <- data.frame(x = numeric(0), y = numeric(0))
for (i in 1:10) {
Sys.sleep(0.25)
# Compute new row of data
new_row <- data.frame(x = rnorm(1), y = rnorm(1))
# If we were passed a progress update function, call it
if (is.function(updateProgress)) {
text <- paste0("x:", round(new_row$x, 2), " y:", round(new_row$y, 2))
updateProgress(detail = text)
}
# Add the new row of data
dat <- rbind(dat, new_row)
}
dat
}
server <- function(input, output) {
output$table <- renderTable({
input$goTable
# Create a Progress object
progress <- shiny::Progress$new()
progress$set(message = "Computing data", value = 0)
# Close the progress when this reactive exits (even if there's an error)
on.exit(progress$close())
# Create a callback function to update progress.
# Each time this is called:
# - If `value` is NULL, it will move the progress bar 1/5 of the remaining
#   distance. If non-NULL, it will set the progress to that value.
# - It also accepts optional detail text.
updateProgress <- function(value = NULL, detail = NULL) {
if (is.null(value)) {
value <- progress$getValue()
value <- value + (progress$getMax() - value) / 5
}
progress$set(value = value, detail = detail)
}
# Compute the new data, and pass in the updateProgress function so
# that it can update the progress indicator.
compute_data(updateProgress)
})
}
ui <- shinyUI(basicPage(
tableOutput('table'),
actionButton('goTable', 'Go table')
))
shinyApp(ui = ui, server = server)
launchShiny()
data <- readRDS("/home/c_thuilliez/Desktop/data.RDS")
View(data)
launchShiny()
data <- readRDS("/home/c_thuilliez/Desktop/data.RDS")
View(data)
launchShiny()
launchShiny()
data = readRDS("/home/c_thuilliez/Desktop/data.RDS")
View(data)
SpatialDimPlot(data)
SpatialDimPlot(data)
launchShiny <- function(
mode = "open",
maxFileSize = 15000,
file_to_load = NULL,
welcome_message = NULL,
projections_show_hover_info = TRUE,
...
){
##--------------------------------------------------------------------------##
## Create global variable with options that need to be available inside the
## Shiny app.
##--------------------------------------------------------------------------##
Shiny.options <<- list(
"mode" = mode,
"file_to_load" = file_to_load,
"welcome_message" = welcome_message,
"shiny_root" = "/home/c_thuilliez/Desktop/scRNAS_CT/Shiny/",
"projections_show_hover_info" = projections_show_hover_info
)
##--------------------------------------------------------------------------##
## Allow upload of files up to 800 MB.
##--------------------------------------------------------------------------##
options(shiny.maxRequestSize = maxFileSize * 1024^2)
##--------------------------------------------------------------------------##
## Load server and UI functions.
##--------------------------------------------------------------------------##
source(
"/home/c_thuilliez/Desktop/scRNAS_CT/Shiny/shiny_UI.R",
local = TRUE
)
source(
"/home/c_thuilliez/Desktop/scRNAS_CT/Shiny/shiny_server.R",
local = TRUE
)
##--------------------------------------------------------------------------##
## Launch Shiny.
##--------------------------------------------------------------------------##
message(
paste0(
'##---------------------------------------------------------------------------##\n',
'## Launching Shiny\n',
'##---------------------------------------------------------------------------##'
)
)
shiny::shinyApp(
ui = ui,
server = server,
...
)
}
launchShiny <- function(
mode = "open",
maxFileSize = 15000,
file_to_load = NULL,
welcome_message = NULL,
projections_show_hover_info = TRUE,
...
){
##--------------------------------------------------------------------------##
## Create global variable with options that need to be available inside the
## Shiny app.
##--------------------------------------------------------------------------##
Shiny.options <<- list(
"mode" = mode,
"file_to_load" = file_to_load,
"welcome_message" = welcome_message,
"shiny_root" = "/home/c_thuilliez/Desktop/scRNAS_CT/Shiny/",
"projections_show_hover_info" = projections_show_hover_info
)
##--------------------------------------------------------------------------##
## Allow upload of files up to 800 MB.
##--------------------------------------------------------------------------##
options(shiny.maxRequestSize = maxFileSize * 1024^2)
##--------------------------------------------------------------------------##
## Load server and UI functions.
##--------------------------------------------------------------------------##
source(
"/home/c_thuilliez/Desktop/scRNAS_CT/Shiny/shiny_UI.R",
local = TRUE
)
source(
"/home/c_thuilliez/Desktop/scRNAS_CT/Shiny/shiny_server.R",
local = TRUE
)
##--------------------------------------------------------------------------##
## Launch Shiny.
##--------------------------------------------------------------------------##
message(
paste0(
'##---------------------------------------------------------------------------##\n',
'## Launching Shiny\n',
'##---------------------------------------------------------------------------##'
)
)
shiny::shinyApp(
ui = ui,
server = server,
...
)
}
launchShiny()
launchShiny()
launchShiny()
launchShiny()
launchShiny()
data = readRDS('/home/c_thuilliez/Desktop/Work/output/Spatial_PDX/MAP177_PDX_PT_S17_h/data.RDS')
type = c('IC_1','IC_2')
l=length(type)
ic_types=values$UMAP@reductions$ica@cell.embeddings[,type]
ic_types=data@reductions$ica@cell.embeddings[,type]
ic_types<-apply(ic_types,2,function(x){x=ifelse(x<=0,0,x); return(x)})
sum_IC<-apply(ic_types,2,function(x){x=x/sum(x); return(x)})
sum_IC=sqrt((rowSums(sum_IC)/max(rowSums(sum_IC))))
ic_types<-apply(ic_types,1,function(x){x/sum(x); return(x)})
ic_types<-cbind(values$UMAP@reductions$umap@cell.embeddings,t(ic_types)) %>%  cbind(.,sum_IC)
ic_types<-cbind(data@reductions$umap@cell.embeddings,t(ic_types)) %>%  cbind(.,sum_IC)
grid=interp(ic_types[,'UMAP_1'],ic_types[,'UMAP_2'],ic_types[,'sum_IC'])
griddf <- data.frame(x = rep(grid$x, ncol(grid$z)),
y = rep(grid$y, each = nrow(grid$z)),
z = as.numeric(grid$z))
griddf$z2=ifelse(griddf$z<quantile(griddf$z,na.rm = TRUE,probs = seq(0, 1, 1/10))[2],0,griddf$z)
# Create plotly object
fig <- plot_ly(type = 'scatter',
mode='markers'
)
ic_types
launchShiny()
library(corrr)
install.packages('corrr')
View(data)
threshold
threshold = 0.4
subset(
data,
score.threshold = threshold
)
subset(
data
)
coordinates <- GetTissueCoordinates(object = data, scale = NULL, cols = NULL)
coordinates
cells <- cells[cells %in% rownames(x = coordinates)]
type = c('IC_1','IC_2')
l=length(type)
ic_types=values$data@reductions$ica@cell.embeddings[,type]
ic_types=data@reductions$ica@cell.embeddings[,type]
ic_types<-apply(ic_types,2,function(x){x=ifelse(x<=0,0,x); return(x)})
sum_IC<-apply(ic_types,2,function(x){x=x/sum(x); return(x)})
sum_IC=sqrt((rowSums(sum_IC)/max(rowSums(sum_IC))))
ic_types<-apply(ic_types,1,function(x){x/sum(x); return(x)})
ic_types<-cbind(GetTissueCoordinates(data),t(ic_types)) %>%  cbind(.,sum_IC)
grid=interp(ic_types$imagecol,ic_types$imagerow,ic_types$sum_IC)
griddf <- data.frame(x = rep(grid$x, ncol(grid$z)),
y = rep(grid$y, each = nrow(grid$z)),
z = as.numeric(grid$z))
griddf$z2=ifelse(griddf$z<quantile(griddf$z,na.rm = TRUE,probs = seq(0, 1, 1/10))[2],0,griddf$z)
griddf
# filter object
coordinates <- GetTissueCoordinates(object = data, scale = NULL, cols = NULL)
coordinates
l=length(type)
ic_types=values$data@reductions$ica@cell.embeddings[,type]
ic_types=data@reductions$ica@cell.embeddings[,type]
ic_types<-apply(ic_types,2,function(x){x=ifelse(x<=0,0,x); return(x)})
sum_IC<-apply(ic_types,2,function(x){x=x/sum(x); return(x)})
sum_IC=sqrt((rowSums(sum_IC)/max(rowSums(sum_IC))))
ic_types<-apply(ic_types,1,function(x){x/sum(x); return(x)})
ic_types<-cbind(GetTissueCoordinates(data, scale = NULL, cols = NULL),t(ic_types)) %>%  cbind(.,sum_IC)
grid=interp(ic_types$imagecol,ic_types$imagerow,ic_types$sum_IC)
griddf <- data.frame(x = rep(grid$x, ncol(grid$z)),
y = rep(grid$y, each = nrow(grid$z)),
z = as.numeric(grid$z))
griddf$z2=ifelse(griddf$z<quantile(griddf$z,na.rm = TRUE,probs = seq(0, 1, 1/10))[2],0,griddf$z)
griddf
ic_types
View(ic_types)
View(griddf)
as.tibble(ic_types)
View(as.tibble(ic_types))
ic_types=values$data@reductions$ica@cell.embeddings[,type]
ic_types=data@reductions$ica@cell.embeddings[,type]
ic_types<-apply(ic_types,2,function(x){x=ifelse(x<=0,0,x); return(x)})
sum_IC<-apply(ic_types,2,function(x){x=x/sum(x); return(x)})
sum_IC=sqrt((rowSums(sum_IC)/max(rowSums(sum_IC))))
ic_types<-apply(ic_types,1,function(x){x/sum(x); return(x)})
ic_types<-cbind(GetTissueCoordinates(data),t(ic_types)) %>%  cbind(.,sum_IC) %>% as.tibble()
ic_types
View(as.tibble(ic_types))
ic_types %>% arrange(imagerow)
ic_types = ic_types %>% arrange(imagerow)
ic_types = ic_types %>% arrange(imagecol)
ic_types
ic_types=data@reductions$ica@cell.embeddings[,type]
ic_types<-apply(ic_types,2,function(x){x=ifelse(x<=0,0,x); return(x)})
sum_IC<-apply(ic_types,2,function(x){x=x/sum(x); return(x)})
sum_IC=sqrt((rowSums(sum_IC)/max(rowSums(sum_IC))))
ic_types<-apply(ic_types,1,function(x){x/sum(x); return(x)})
ic_types<-cbind(GetTissueCoordinates(data, scale = NULL, cols = NULL),t(ic_types)) %>%  cbind(.,sum_IC)
ic_types
grid=interp(ic_types$imagecol,ic_types$imagerow,ic_types$sum_IC)
griddf <- data.frame(x = rep(grid$x, ncol(grid$z)),
y = rep(grid$y, each = nrow(grid$z)),
z = as.numeric(grid$z))
griddf
arrange(ic_types,imagerow)
ic_types = arrange(ic_types,imagerow)
ic_types = arrange(ic_types,imagecol)
griddf
View(griddf)
View(ic_types)
ic_types = arrange(ic_types,imagecol)
ic_types = arrange(ic_types,imagerow)
View(ic_types)
ic_types$cell_names = rownames(ic_types)
ic_types
grid=interp(ic_types$imagecol,ic_types$imagerow,ic_types$sum_IC)
griddf <- data.frame(x = rep(grid$x, ncol(grid$z)),
y = rep(grid$y, each = nrow(grid$z)),
z = as.numeric(grid$z))
griddf$z2=ifelse(griddf$z<quantile(griddf$z,na.rm = TRUE,probs = seq(0, 1, 1/10))[2],0,griddf$z)
griddf
grid
griddf$z2
griddf
griddf[griddf$z2 > 0.3]
griddf$z2 > 0.3
griddf[,griddf$z2 > 0.3]
griddf[griddf$z2 > 0.3,]
plot(griddf[griddf$z2 > 0.3,])
plot(griddf[griddf$z2 > 0.3,])
launchShiny()
launchShiny()
launchShiny()
launchShiny()
launchShiny()
library(shinyalert)
install.packages('shinyalert')
library(shinyalert)
launchShiny()
