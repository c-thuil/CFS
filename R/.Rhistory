hovertemplate = paste(
plot_ly(
x = colnames(z), y = rownames(z),
z = z, type = "heatmap"
)
launchShiny()
# only keep IC of interest
names(Launch_analysis()@misc)
# only keep IC of interest
names(data@misc)
# only keep IC of interest
startsWith(names(data@misc), "IC")
z <- z[,startsWith(names(data@misc), "IC_")]
startsWith(names(data@misc), "IC_")
launchShiny()
Gene_names <- names(Gene)
z <- head(data@reductions$ica@feature.loadings[Gene_names,],20)
p <- pheatmap(z,clustering_method = "ward.D",clustering_distance_cols = "correlation")
row_order <- p[["tree_row"]][["order"]]
z <- z[row_order,]
z <- z[,startsWith(names(Launch_analysis()@misc), "IC_")]
z <- z[,startsWith(names(data@misc), "IC_")]
startsWith(names(data@misc), "IC_")
View(z)
# only keep IC of interest
names(data@misc)[startsWith(names(data@misc), "IC_")]
z <- z[,names(data@misc)[startsWith(names(data@misc), "IC_")]]
launchShiny()
launchShiny()
table <- data@misc$IC_1$en$GO_Biological_Process_2015
table["Overlap"] <- lapply(table["Overlap"], sub, pattern="/.*", replacement="")
genes <- table["Genes"]
View(genes)
strsplit(genes, split = ";")
for (k in 1:lenth(table["Genes"])) {
strsplit(k, split = ";")
}
for (k in 1:length(table["Genes"])) {
strsplit(k, split = ";")
}
for (k in table["Genes"]) {
strsplit(k, split = ";")
}
for (k in table["Genes"]) {
k <- strsplit(k, split = ";")
}
View(k)
strsplit(table["Genes"], split = ";")
i = 1
i = 1
for (k in table["Genes"]) {
table["Genes"][i] <- strsplit(k, split = ";")
i <- i+1
}
table["Genes"][i]
table["Genes"]
table["Genes"][i]
table["Genes"][,i]
table["Genes"][i,]
k
x <- strsplit(table["Genes"][i,], split = ";")
table["Genes"][i,][1]
View(table)
x <- strsplit(table["Genes"][i,][1], split = ";")
View(x)
x <- strsplit(table["Genes"][i,], split = ";")
View(x)
View(x)
for (k in 1:length(table["Genes"])) {
x <- strsplit(table["Genes"][i,][1], split = ";")
x <- paste(x,sep="<br>")
i <- i+1
}
x
number_of_genes <- table["Overlap"]
table["Overlap"] <- lapply(table["Overlap"], sub, pattern="/.*", replacement="")
genes <- table["Genes"]
i = 1
for (k in 1:length(table["Genes"])) {
x <- strsplit(table["Genes"][i,][1], split = ";")
x <- paste(x,sep="<br>")
i <- i+1
}
x <- paste(x[1],sep="<br>")
i = 1
for (k in 1:length(table["Genes"])) {
x <- strsplit(table["Genes"][i,][1], split = ";")
x <- paste(x[1],collapse = "<br>")
i <- i+1
}
number_of_genes <- table["Overlap"]
table["Overlap"] <- lapply(table["Overlap"], sub, pattern="/.*", replacement="")
number_enrichr <- input$enrichment_disp_number
genes <- table["Genes"]
i = 1
for (k in 1:length(table["Genes"])) {
x <- strsplit(table["Genes"][i,][1], split = ";")
x <- paste(x[1],collapse = "<br>")
i <- i+1
}
x <- table["Overlap"][1:number_enrichr,]
x <- paste(x,collapse = "<br>")
x <- strsplit(table["Genes"][i,][1], split = ";")
View(x)
x <- unlist(strsplit(table["Genes"][i,][1], split = ";"))
x
x <- paste(x,collapse = "<br>")
number_of_genes <- table["Overlap"]
number_enrichr <- input$enrichment_disp_number
genes <- table["Genes"]
i = 1
for (k in 1:length(table["Genes"])) {
u <- unlist(strsplit(table["Genes"][i,][1], split = ";"))
u <- paste(u,collapse = "<br>")
table["Genes"][k] <- u
i <- i+1
}
table
launchShiny()
launchShiny()
u <- unlist(strsplit(table["Genes"][i,][1], split = ";"))
number_of_genes <- table["Overlap"]
table["Overlap"] <- lapply(table["Overlap"], sub, pattern="/.*", replacement="")
number_enrichr <- input$enrichment_disp_number
View(data)
table <- data@misc[["IC_1"]][["en"]][["GO_Biological_Process_2015"]]
number_of_genes <- table["Overlap"]
table["Overlap"] <- lapply(table["Overlap"], sub, pattern="/.*", replacement="")
number_enrichr <- input$enrichment_disp_number
# create list of genes
i = 1
u <- unlist(strsplit(table["Genes"][i,][1], split = ";"))
gene_text = c()
# create list of genes
i = 1
gene_text = c()
for (k in 1:length(table["Genes"])) {
u <- unlist(strsplit(table["Genes"][i,][1], split = ";"))
gene_text <- append(gene_text,u[i])
if i.isMultiple(of: 5) {
for (k in 1:length(table["Genes"])) {
u <- unlist(strsplit(table["Genes"][i,][1], split = ";"))
gene_text <- append(gene_text,u[i])
if (i.isMultiple(of: 5)) {
gene_text <- append(gene_text,"<br>")
}
u <- paste(u,collapse = ",")
table["Genes"][k] <- u
i <- i+1
}
gene_text = c()
# create list of genes
i = 1
gene_text = c()
for (k in 1:length(table["Genes"])) {
u <- unlist(strsplit(table["Genes"][i,][1], split = ";"))
gene_text <- append(gene_text,u[i])
if (i %% 5 == 0) {
gene_text <- append(gene_text,"<br>")
}
u <- paste(u,collapse = ",")
table["Genes"][k] <- u
i <- i+1
}
u
i %% 5
table["Genes"]
length(table["Genes"])
length(table["Genes"][1,])
length(table)
length(rownames(table))
# create list of genes
i = 1
gene_text = c()
for (k in 1:length(rownames(table))) {
u <- unlist(strsplit(table["Genes"][i,][1], split = ";"))
gene_text <- append(gene_text,u[i])
if (i %% 5 == 0) {
gene_text <- append(gene_text,"<br>")
}
u <- paste(u,collapse = ",")
table["Genes"][k] <- u
i <- i+1
}
table <- data@misc[["IC_1"]][["en"]][["GO_Biological_Process_2015"]]
number_of_genes <- table["Overlap"]
table["Overlap"] <- lapply(table["Overlap"], sub, pattern="/.*", replacement="")
number_enrichr <- input$enrichment_disp_number
# create list of genes
i = 1
gene_text = c()
for (k in 1:length(rownames(table))) {
u <- unlist(strsplit(table["Genes"][i,][1], split = ";"))
gene_text <- append(gene_text,u[i])
if (i %% 5 == 0) {
gene_text <- append(gene_text,"<br>")
}
u <- paste(u,collapse = ",")
table["Genes"][k] <- u
i <- i+1
}
table["Genes"][k,]
table["Genes"][k]
table <- data@misc[["IC_1"]][["en"]][["GO_Biological_Process_2015"]]
# create list of genes
for (k in 1:length(rownames(table))) {
gene_text = c()
u <- unlist(strsplit(table["Genes"][k,][1], split = ";"))
for (v in 1:length(u)) {
gene_text <- append(gene_text,u[v])
if (v %% 5 == 0) {
gene_text <- append(gene_text,"<br>")
}
}
u <- paste(u,collapse = ",")
table["Genes"][k,] <- u
}
genes <- table["Genes"]
genes
View(genes)
table
View(table)
table <- data@misc[["IC_1"]][["en"]][["GO_Biological_Process_2015"]]
# create list of genes
for (k in 1:length(rownames(table))) {
gene_text = c()
u <- unlist(strsplit(table["Genes"][k,][1], split = ";"))
for (v in 1:length(u)) {
gene_text <- append(gene_text,u[v])
if (v %% 5 == 0) {
gene_text <- append(gene_text,"<br>")
}
}
u <- paste(gene_text,collapse = ",")
table["Genes"][k,] <- u
}
table
View(table)
launchShiny()
launchShiny()
launchShiny <- function(
mode = "open",
maxFileSize = 15000,
file_to_load = NULL,
welcome_message = NULL,
projections_show_hover_info = TRUE,
...
){
##--------------------------------------------------------------------------##
## Create global variable with options that need to be available inside the
## Shiny app.
##--------------------------------------------------------------------------##
Shiny.options <<- list(
"mode" = mode,
"file_to_load" = file_to_load,
"welcome_message" = welcome_message,
"shiny_root" = "/home/c_thuilliez/Desktop/scRNAS_CT/Shiny/",
"projections_show_hover_info" = projections_show_hover_info
)
##--------------------------------------------------------------------------##
## Allow upload of files up to 800 MB.
##--------------------------------------------------------------------------##
options(shiny.maxRequestSize = maxFileSize * 1024^2)
##--------------------------------------------------------------------------##
## Load server and UI functions.
##--------------------------------------------------------------------------##
source(
"/home/c_thuilliez/Desktop/scRNAS_CT/Shiny/shiny_UI.R",
local = TRUE
)
source(
"/home/c_thuilliez/Desktop/scRNAS_CT/Shiny/shiny_server.R",
local = TRUE
)
##--------------------------------------------------------------------------##
## Launch Shiny.
##--------------------------------------------------------------------------##
message(
paste0(
'##---------------------------------------------------------------------------##\n',
'## Launching Shiny\n',
'##---------------------------------------------------------------------------##'
)
)
shiny::shinyApp(
ui = ui,
server = server,
...
)
}
launchShiny()
launchShiny()
launchShiny()
launchShiny()
launchShiny()
launchShiny()
launchShiny()
launchShiny()
library(data.table)
launchShiny()
data = readRDS("/home/c_thuilliez/Desktop/Work/output/Spatial_PDX/MAP177_PDX_PT_S17_h/data.RDS")
row_names = names(data@misc)[grep('IC_', names(data@misc))]
data@misc$annotation = matrix(data = NA, nrow = length(row_names), ncol = 3)
rownames(data@misc$annotation) = row_names
colnames(data@misc$annotation) = c('Use','Type','Annotation')
data@misc$annotation
data@misc$annotation
as.data.table(data@misc$annotation)
rownames(data@misc$annotation) = row_names
as.data.table(data@misc$annotation)
data@misc$annotation = as.data.table(data@misc$annotation)
rownames(data@misc$annotation) = row_names
data@misc$annotation
View(data@misc$annotation)
rownames(data@misc$annotation) = row_names
View(data@misc$annotation)
row_names = names(data@misc)[grep('IC_', names(data@misc))]
data@misc$annotation = matrix(data = NA, nrow = length(row_names), ncol = 3)
rownames(data@misc$annotation) = row_names
colnames(data@misc$annotation) = c('Use','Type','Annotation')
data@misc$annotation
View(data@misc$annotation)
DT = as.data.table(values$Annotation[1,])
values$Annotation[1,]
data@misc$Annotation[1,]
data@misc$Annotation
row_names = names(data@misc)[grep('IC_', names(data@misc))]
data@misc$annotation = matrix(data = NA, nrow = length(row_names), ncol = 3)
rownames(data@misc$annotation) = row_names
colnames(data@misc$annotation) = c('Use','Type','Annotation')
data@misc$Annotation
data@misc$annotation
data@misc$annotation[1,]
data@misc$annotation[1,]
data@misc$annotation[1,1]
data@misc$annotation[1,]
data@misc$annotation[1:2,]
data@misc$annotation[1,]
datatable(DT, editable = list(target = 'cell', disable = list(columns = c(0))), class = 'cell-border stripe', colnames = c('IC' = 1))
datatable(data@misc$annotation[1,], editable = list(target = 'cell', disable = list(columns = c(0))), class = 'cell-border stripe', colnames = c('IC' = 1))
datatable(data@misc$annotation[1:2,], editable = list(target = 'cell', disable = list(columns = c(0))), class = 'cell-border stripe', colnames = c('IC' = 1))
datatable(data@misc$annotation[1,1:3], editable = list(target = 'cell', disable = list(columns = c(0))), class = 'cell-border stripe', colnames = c('IC' = 1))
datatable(data@misc$annotation[1,], editable = list(target = 'cell', disable = list(columns = c(0))), class = 'cell-border stripe', colnames = c('IC' = 1))
datatable(as.matrix(data@misc$annotation[1,]), editable = list(target = 'cell', disable = list(columns = c(0))), class = 'cell-border stripe', colnames = c('IC' = 1))
datatable(as.matrix(data@misc$annotation[1,], rownames="IC_1"), editable = list(target = 'cell', disable = list(columns = c(0))), class = 'cell-border stripe', colnames = c('IC' = 1))
datatable(as.matrix(data@misc$annotation[1,], rownames=c("IC_1")), editable = list(target = 'cell', disable = list(columns = c(0))), class = 'cell-border stripe', colnames = c('IC' = 1))
datatable(as.matrix(data@misc$annotation[1,], rownames=c("IC_1","2","3")), editable = list(target = 'cell', disable = list(columns = c(0))), class = 'cell-border stripe', colnames = c('IC' = 1))
datatable(as.data.table(data@misc$annotation[1,]), editable = list(target = 'cell', disable = list(columns = c(0))), class = 'cell-border stripe', colnames = c('IC' = 1))
datatable(as.matrix(data@misc$annotation[1,]), editable = list(target = 'cell', disable = list(columns = c(0))), class = 'cell-border stripe', colnames = c('IC' = 1))
datatable(as.data.table(data@misc$annotation[1,]), editable = list(target = 'cell', disable = list(columns = c(0))), class = 'cell-border stripe', colnames = c('IC' = 1))
datatable(as.data.table(data@misc$annotation[1,], keep.rownames=TRUE), editable = list(target = 'cell', disable = list(columns = c(0))), class = 'cell-border stripe', colnames = c('IC' = 1))
datatable(as.data.table(data@misc$annotation[1,], keep.rownames=TRUE, na.rm=FALSE), editable = list(target = 'cell', disable = list(columns = c(0))), class = 'cell-border stripe', colnames = c('IC' = 1))
values$Annotation[1,]
matrix(values$Annotation[1,], nrow = 1, ncol = 3)
matrix(values$Annotation, nrow = 1, ncol = 3)
values = list()
values$Annotation = data@misc$annotation
matrix(values$Annotation[1,], nrow = 1, ncol = 3)
DT = matrix(values$Annotation[1,], nrow = 1, ncol = 3, dimnames = list(c("X"), c("A","B","C")))
DT
DT = matrix(values$Annotation[1,], nrow = 1, ncol = 3, dimnames = list(c("IC_1"), c('Use','Type','Annotation')))
datatable(DT, editable = list(target = 'cell', disable = list(columns = c(0))), class = 'cell-border stripe', colnames = c('IC' = 1))
matrix(values$Annotation["IC_1",], nrow = 1, ncol = 3, dimnames = list(c(input$IC_choice), c('Use','Type','Annotation')))
matrix(values$Annotation["IC_1",], nrow = 1, ncol = 3, dimnames = list(c("IC_1"), c('Use','Type','Annotation')))
launchShiny()
launchShiny()
launchShiny()
launchShiny()
launchShiny()
launchShiny()
values$Annotation
values$Annotation[,'Type']
as.vector(values$Annotation[,'Type'])
unique(as.vector(values$Annotation[,'Type']))
launchShiny()
launchShiny()
launchShiny()
View(data)
data@meta.data
data@meta.data$seurat_clusters
unique(data@meta.data$seurat_clusters)
launchShiny()
unique(values$data@meta.data$seurat_clusters)
unique(data@meta.data$seurat_clusters)
order(unique(data@meta.data$seurat_clusters))
sort(unique(data@meta.data$seurat_clusters))
launchShiny()
launchShiny()
launchShiny()
launchShiny()
View(data)
launchShiny()
launchShiny()
View(data)
View(values)
launchShiny()
data_2 <- readRDS("/home/c_thuilliez/Desktopdata.RDS")
data_2 <- readRDS("/home/c_thuilliez/Desktop/data.RDS")
View(data_2)
View(data)
View(data_2)
View(data)
View(data_2)
View(data)
View(data_2)
data_2@meta.data
View(data_2@meta.data)
data = readRDS("/home/c_thuilliez/Desktop/Work/output/Spatial_Patient/Z_Slide2_S2/data.RDS")
View(data)
View(data_2)
SpatialDimPlot(sata_2)
SpatialDimPlot(data_2)
SpatialDimPlot(data)
SpatialDimPlot(data_2)
data_2@misc$annotation
DimPlot(data)
DimPlot(data_2)
launchShiny()
launchShiny()
data_2 = readRDS("/home/c_thuilliez/Desktop/data.RDS")
DimPlot(data_2)
DimPlot(data)
DimPlot(data_2)
data_2@misc$annotation
launchShiny()
server <- function(input, output) {
output$plot <- renderPlot({
input$goPlot # Re-run when button is clicked
# Create 0-row data frame which will be used to store data
dat <- data.frame(x = numeric(0), y = numeric(0))
withProgress(message = 'Making plot', value = 0, {
# Number of times we'll go through the loop
n <- 10
for (i in 1:n) {
# Each time through the loop, add another row of data. This is
# a stand-in for a long-running computation.
dat <- rbind(dat, data.frame(x = rnorm(1), y = rnorm(1)))
# Increment the progress bar, and update the detail text.
incProgress(1/n, detail = paste("Doing part", i))
# Pause for 0.1 seconds to simulate a long computation.
Sys.sleep(0.1)
}
})
plot(dat$x, dat$y)
})
}
ui <- shinyUI(basicPage(
plotOutput('plot', width = "300px", height = "300px"),
actionButton('goPlot', 'Go plot')
))
shinyApp(ui = ui, server = server)
# This function computes a new data set. It can optionally take a function,
# updateProgress, which will be called as each row of data is added.
compute_data <- function(updateProgress = NULL) {
# Create 0-row data frame which will be used to store data
dat <- data.frame(x = numeric(0), y = numeric(0))
for (i in 1:10) {
Sys.sleep(0.25)
# Compute new row of data
new_row <- data.frame(x = rnorm(1), y = rnorm(1))
# If we were passed a progress update function, call it
if (is.function(updateProgress)) {
text <- paste0("x:", round(new_row$x, 2), " y:", round(new_row$y, 2))
updateProgress(detail = text)
}
# Add the new row of data
dat <- rbind(dat, new_row)
}
dat
}
server <- function(input, output) {
output$table <- renderTable({
input$goTable
# Create a Progress object
progress <- shiny::Progress$new()
progress$set(message = "Computing data", value = 0)
# Close the progress when this reactive exits (even if there's an error)
on.exit(progress$close())
# Create a callback function to update progress.
# Each time this is called:
# - If `value` is NULL, it will move the progress bar 1/5 of the remaining
#   distance. If non-NULL, it will set the progress to that value.
# - It also accepts optional detail text.
updateProgress <- function(value = NULL, detail = NULL) {
if (is.null(value)) {
value <- progress$getValue()
value <- value + (progress$getMax() - value) / 5
}
progress$set(value = value, detail = detail)
}
# Compute the new data, and pass in the updateProgress function so
# that it can update the progress indicator.
compute_data(updateProgress)
})
}
ui <- shinyUI(basicPage(
tableOutput('table'),
actionButton('goTable', 'Go table')
))
shinyApp(ui = ui, server = server)
launchShiny()
data <- readRDS("/home/c_thuilliez/Desktop/data.RDS")
View(data)
launchShiny()
data <- readRDS("/home/c_thuilliez/Desktop/data.RDS")
View(data)
launchShiny()
launchShiny()
data = readRDS("/home/c_thuilliez/Desktop/data.RDS")
View(data)
SpatialDimPlot(data)
SpatialDimPlot(data)
