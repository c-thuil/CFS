yaxis = list(showgrid = FALSE, showticklabels=FALSE),
showlegend = TRUE,
images = list(
source = raster2uri(raster::as.raster(data@images$slice1@image)),
xref = 'x',
yref =  'y',
sizex = dim(data@images$slice1@image)[1],
sizey = dim(data@images$slice1@image)[2],
sizing = 'stretch',
opacity = 1,
layer= 'below',
x = -10,
y = -4,
yanchor = 'top',
xanchor = 'left'
)
)
View(fig)
print(fig)
fig <- plot_ly(type = 'pie')
for (i in 1:nrow(ic_types)) {
r=sum_IC
x = c(ic_types[i,"row"]/max(ic_types["row"])-(ic_types[i,"sum_IC"]/20),(ic_types[i,"row"]/max(ic_types["row"]))+ic_types[i,"sum_IC"]/20)
y = c((ic_types[i,"col"]/max(ic_types["col"]))-(ic_types[i,"sum_IC"]/20),(ic_types[i,"col"]/max(ic_types["col"]))+ic_types[i,"sum_IC"]/20)
fig <- fig %>% add_pie(data = ic_types, labels = colnames(ic_types[i,5:2+length(type)][which(ic_types[i,5:2+length(type)] != 0)])
, values = as.double(ic_types[i,5:2+length(type)][which(ic_types[i,5:2+length(type)] != 0)]),
name = rownames(ic_types[i,]), domain = list(x = x, y = y),
showlegend = TRUE, text = NULL, textposition = "none")
}
fig <- fig %>% layout(xaxis=list(showgrid = FALSE, showticklabels=FALSE),
yaxis = list(showgrid = FALSE, showticklabels=FALSE),
showlegend = TRUE,
images = list(
source = raster2uri(raster::as.raster(data@images$slice1@image)),
xref = 'x',
yref =  'y',
sizex = dim(data@images$slice1@image)[1],
sizey = dim(data@images$slice1@image)[2],
sizing = 'stretch',
opacity = 1,
layer= 'below',
x = -10,
y = -4,
yanchor = 'top',
xanchor = 'left'
)
)
print(fig)
raster::as.raster(data@images$slice1@image)
data@images$slice1@image
fig <- plot_ly(type = 'pie')
fig <- fig %>% add_trace(fig, type="image", z= data@images$slice1@image)
print(fig)
data@images$slice1@image
view(data@images$slice1@image)
fig <- plot_ly(type = 'pie')
fig <- fig %>% add_trace(fig, type="image", source = raster2uri(raster::as.raster(data@images$slice1@image)))
print(fig)
fig <- plot_ly(type = 'pie')
for (i in 1:nrow(ic_types)) {
r=sum_IC
x = c(ic_types[i,"row"]/max(ic_types["row"])-(ic_types[i,"sum_IC"]/20),(ic_types[i,"row"]/max(ic_types["row"]))+ic_types[i,"sum_IC"]/20)
y = c((ic_types[i,"col"]/max(ic_types["col"]))-(ic_types[i,"sum_IC"]/20),(ic_types[i,"col"]/max(ic_types["col"]))+ic_types[i,"sum_IC"]/20)
fig <- fig %>% add_pie(data = ic_types, labels = colnames(ic_types[i,5:2+length(type)][which(ic_types[i,5:2+length(type)] != 0)])
, values = as.double(ic_types[i,5:2+length(type)][which(ic_types[i,5:2+length(type)] != 0)]),
name = rownames(ic_types[i,]), domain = list(x = x, y = y),
showlegend = TRUE, text = NULL, textposition = "none")
}
fig <- fig %>% add_trace(fig, type="image", source = raster2uri(raster::as.raster(data@images$slice1@image)))
print(fig)
fig <- plot_ly(type = 'pie')
fig <- fig %>% add_trace(fig, type="image", source = raster2uri(raster::as.raster(data@images$slice1@image)), opacity = 1)
fig <- fig %>% layout(xaxis=list(showgrid = FALSE, showticklabels=FALSE),
yaxis = list(showgrid = FALSE, showticklabels=FALSE, autorange=FALSE),
showlegend = TRUE
)
print(fig)
fig <- plot_ly(type = 'pie')
fig <- fig %>% add_trace(fig, type="image", source = raster2uri(raster::as.raster(data@images$slice1@image)), opacity = 1)
fig <- fig %>% layout(xaxis=list(showgrid = FALSE, showticklabels=FALSE),
yaxis = list(showgrid = FALSE, showticklabels=FALSE, autorange=TRUE),
showlegend = TRUE
)
print(fig)
fig <- plot_ly(type = 'pie')
for (i in 1:nrow(ic_types)) {
r=sum_IC
x = c(ic_types[i,"row"]/max(ic_types["row"])-(ic_types[i,"sum_IC"]/20),(ic_types[i,"row"]/max(ic_types["row"]))+ic_types[i,"sum_IC"]/20)
y = c((ic_types[i,"col"]/max(ic_types["col"]))-(ic_types[i,"sum_IC"]/20),(ic_types[i,"col"]/max(ic_types["col"]))+ic_types[i,"sum_IC"]/20)
fig <- fig %>% add_pie(data = ic_types, labels = colnames(ic_types[i,5:2+length(type)][which(ic_types[i,5:2+length(type)] != 0)])
, values = as.double(ic_types[i,5:2+length(type)][which(ic_types[i,5:2+length(type)] != 0)]),
name = rownames(ic_types[i,]), domain = list(x = x, y = y),
showlegend = TRUE, text = NULL, textposition = "none")
}
fig <- fig %>% add_trace(fig, type="image", source = raster2uri(raster::as.raster(data@images$slice1@image)), opacity = 1)
fig <- fig %>% layout(xaxis=list(showgrid = FALSE, showticklabels=FALSE),
yaxis = list(showgrid = FALSE, showticklabels=FALSE, autorange=TRUE),
showlegend = TRUE
)
print(fig)
launchShiny()
launchShiny()
launchShiny <- function(
mode = "open",
maxFileSize = 15000,
file_to_load = NULL,
welcome_message = NULL,
projections_show_hover_info = TRUE,
...
){
##--------------------------------------------------------------------------##
## Create global variable with options that need to be available inside the
## Shiny app.
##--------------------------------------------------------------------------##
Shiny.options <<- list(
"mode" = mode,
"file_to_load" = file_to_load,
"welcome_message" = welcome_message,
"shiny_root" = "/home/c_thuilliez/Desktop/scRNAS_CT/Shiny/",
"projections_show_hover_info" = projections_show_hover_info
)
##--------------------------------------------------------------------------##
## Allow upload of files up to 800 MB.
##--------------------------------------------------------------------------##
options(shiny.maxRequestSize = maxFileSize * 1024^2)
##--------------------------------------------------------------------------##
## Load server and UI functions.
##--------------------------------------------------------------------------##
source(
"/home/c_thuilliez/Desktop/scRNAS_CT/Shiny/shiny_UI.R",
local = TRUE
)
source(
"/home/c_thuilliez/Desktop/scRNAS_CT/Shiny/shiny_server.R",
local = TRUE
)
##--------------------------------------------------------------------------##
## Launch Shiny.
##--------------------------------------------------------------------------##
message(
paste0(
'##---------------------------------------------------------------------------##\n',
'## Launching Shiny\n',
'##---------------------------------------------------------------------------##'
)
)
shiny::shinyApp(
ui = ui,
server = server,
...
)
}
launchShiny()
launchShiny()
launchShiny()
launchShiny()
launchShiny()
launchShiny()
launchShiny()
launchShiny <- function(
mode = "open",
maxFileSize = 15000,
file_to_load = NULL,
welcome_message = NULL,
projections_show_hover_info = TRUE,
...
){
##--------------------------------------------------------------------------##
## Create global variable with options that need to be available inside the
## Shiny app.
##--------------------------------------------------------------------------##
Shiny.options <<- list(
"mode" = mode,
"file_to_load" = file_to_load,
"welcome_message" = welcome_message,
"shiny_root" = "/home/c_thuilliez/Desktop/scRNAS_CT/Shiny/",
"projections_show_hover_info" = projections_show_hover_info
)
##--------------------------------------------------------------------------##
## Allow upload of files up to 800 MB.
##--------------------------------------------------------------------------##
options(shiny.maxRequestSize = maxFileSize * 1024^2)
##--------------------------------------------------------------------------##
## Load server and UI functions.
##--------------------------------------------------------------------------##
source(
"/home/c_thuilliez/Desktop/scRNAS_CT/Shiny/shiny_UI.R",
local = TRUE
)
source(
"/home/c_thuilliez/Desktop/scRNAS_CT/Shiny/shiny_server.R",
local = TRUE
)
##--------------------------------------------------------------------------##
## Launch Shiny.
##--------------------------------------------------------------------------##
message(
paste0(
'##---------------------------------------------------------------------------##\n',
'## Launching Shiny\n',
'##---------------------------------------------------------------------------##'
)
)
shiny::shinyApp(
ui = ui,
server = server,
...
)
}
launchShiny()
launchShiny()
library(igraph)
library(CellChat)
library(tidyverse)
library(Seurat)
library(pheatmap)
#library(spatialEco)
# library(Cairo)
library(e1071)
# library(patchwork)
library(ggalluvial)
library(NMF)
# library(copykat)
library(enrichR)
library(ape)
#library(Rfast2)
#library(harmony)
#library(furrr)
library(copykat)
library(diffusionMap)
library(destiny)
library(glmnet)
#bayesspace
library(SingleCellExperiment)
library(ggplot2)
library(BayesSpace)
library(Matrix)
options(browser = "firefox")
library(corrplot)
setEnrichrSite("Enrichr")
dbs <- listEnrichrDbs()
websiteLive <- TRUE
n_cores = 8
future::plan("multicore", workers = n_cores)
source('/home/c_thuilliez/Desktop/scRNAS_CT/R/Cluster_ICA.R')
source('/home/c_thuilliez/Desktop/scRNAS_CT/R/Copykat.R')
source('/home/c_thuilliez/Desktop/scRNAS_CT/R/DoHeatmapICA.R')
source('/home/c_thuilliez/Desktop/scRNAS_CT/R/ICGeneAndStats.R')
source('/home/c_thuilliez/Desktop/scRNAS_CT/R/Markers_Clusters_ICA.R')
source('/home/c_thuilliez/Desktop/scRNAS_CT/R/Minor_functions.R')
source('/home/c_thuilliez/Desktop/scRNAS_CT/R/prepare_data.R')
source('/home/c_thuilliez/Desktop/scRNAS_CT/R/RunICA.R')
source('/home/c_thuilliez/Desktop/scRNAS_CT/R/Show_IC_and_Enrich.R')
source('/home/c_thuilliez/Desktop/scRNAS_CT/R/saveForShiny.R')
source('/home/c_thuilliez/Desktop/scRNAS_CT/R/DoHeatmapICA_S.R')
source('/home/c_thuilliez/Desktop/scRNAS_CT/R/Show_IC_and_Enrich_S.R')
source('/home/c_thuilliez/Desktop/scRNAS_CT/R/launchShiny.R')
data_h <- readRDS('/home/c_thuilliez/Desktop/Work/output/Spatial_PDX/MAP177_PDX_PT_S17_h/data.RDS')
data_m <- readRDS('/home/c_thuilliez/Desktop/Work/output/Spatial_PDX/MAP177_PDX_PT_S17_m/data.RDS')
w <-
###
coordinates <- GetTissueCoordinates(data)
w <-
###
coordinates <- GetTissueCoordinates(data_h)
coordinates <- GetTissueCoordinates(data_h)
View(coordinates)
install.packages('mnormt')
library(mnormt)
set.seed(0)
x1 <- seq(-4, 4, 0.1)
x2 <- seq(-5, 5, 0.1)
mean <- c(0, 0)
cov <- matrix(c(2, -1, -1, 2), nrow=2)
f <- function(x1, x2) dmnorm(cbind(x1, x2), mean, cov)
y <- outer(x1, x2, f)
#create surface plot
persp(x1, x2, y, theta=-20, phi=20, col = 'blue',
expand=0.8, ticktype='detailed')
outer(x1, x2, f)
View(outer(x1, x2, f))
seq(-4, 4, 0.1)
GetTissueCoordinates(data_h)
GetTissueCoordinates(data_h, scale = "lowres")
GetTissueCoordinates(data_h, scale = "highres")
GetTissueCoordinates(data_h, scale = "higres")
GetTissueCoordinates(data_h, scale = "hires")
GetTissueCoordinates(data_h, scale = "tissue")
GetTissueCoordinates(data_h, scale = "spot")
GetTissueCoordinates(data_h, scale = "spo")
GetTissueCoordinates(data_h, scale = "s")
GetTissueCoordinates(data_h, scale = "tissue")
GetTissueCoordinates(data_h, scale = "fiducial")
GetTissueCoordinates(data_h, scale = "tissue")
GetTissueCoordinates(data_h, scale = "lowres")
GetTissueCoordinates(data_h)
GetTissueCoordinates(data_h)["imagerow"]
x1 <- GetTissueCoordinates(data_h)["imagerow"]
x2 <- GetTissueCoordinates(data_h)["imagecol"]
mean <- c(0, 0)
View(data_h)
data_h@reductions$ica@cell.embeddings
View(data_h@reductions$ica)
data_h@reductions$ica@cell.feature
data_h@reductions$ica@cell.feature["IC_1"]
data_h@reductions$ica@cell.feature[1]
View(data_h@reductions$ica["IC_1"])
View(data_h@reductions$ica[1])
View(data_h@reductions$ica[,1])
data_h@reductions$ica@cell.embeddings
data_h@reductions$ica@cell.embeddings[1]
data_h@reductions$ica@cell.embeddings[,1]
x1 <- GetTissueCoordinates(data_h)["imagerow"]
x2 <- GetTissueCoordinates(data_h)["imagecol"]
y <- data_h@reductions$ica@cell.embeddings[,1]
#create surface plot
persp(x1, x2, y, theta=-20, phi=20, col = 'blue',
expand=0.8, ticktype='detailed')
seq(-4, 4, 0.1)
View(seq(-4, 4, 0.1))
GetTissueCoordinates(data_h)["imagerow"]
as.double(GetTissueCoordinates(data_h)["imagerow"])
as.list(GetTissueCoordinates(data_h)["imagerow"])
as.double(as.list(GetTissueCoordinates(data_h)["imagerow"]))
x1 <- as.list(GetTissueCoordinates(data_h)["imagerow"])
x2 <- as.list(GetTissueCoordinates(data_h)["imagecol"])
y <- data_h@reductions$ica@cell.embeddings[,1]
#create surface plot
persp(x1, x2, y, theta=-20, phi=20, col = 'blue',
expand=0.8, ticktype='detailed')
as.double(unlist(GetTissueCoordinates(data_h)["imagerow"]))
x1 <- as.double(unlist(GetTissueCoordinates(data_h)["imagerow"]))
x2 <- as.double(unlist(GetTissueCoordinates(data_h)["imagecol"]))
y <- data_h@reductions$ica@cell.embeddings[,1]
#create surface plot
persp(x1, x2, y, theta=-20, phi=20, col = 'blue',
expand=0.8, ticktype='detailed')
order(x1)
order(GetTissueCoordinates(data_h)["imagerow"])
order(unlist(GetTissueCoordinates(data_h)["imagerow"]))
order(as.double(unlist(GetTissueCoordinates(data_h)["imagerow"])))
View(order(as.double(unlist(GetTissueCoordinates(data_h)["imagerow"]))))
View(data_h)
View(order(as.real(unlist(GetTissueCoordinates(data_h)["imagerow"]))))
View(order(as.double(unlist(GetTissueCoordinates(data_h)["imagerow"]))))
sort(as.double(unlist(GetTissueCoordinates(data_h)["imagerow"])))
x1 <- sort(as.double(unlist(GetTissueCoordinates(data_h)["imagerow"])))
x2 <- sort(as.double(unlist(GetTissueCoordinates(data_h)["imagecol"])))
y <- data_h@reductions$ica@cell.embeddings[,1]
#create surface plot
persp(x1, x2, y, theta=-20, phi=20, col = 'blue',
expand=0.8, ticktype='detailed')
sort(as.double(unlist(GetTissueCoordinates(data_h)["imagecol"])))
x1 <- sort(as.double(unlist(GetTissueCoordinates(data_h)["imagerow"])))
x2 <- sort(as.double(unlist(GetTissueCoordinates(data_h)["imagecol"])))
y <- data_h@reductions$ica@cell.embeddings[,1]
#create surface plot
persp(x1, x2, y, theta=-20, phi=20, col = 'blue',
expand=0.8, ticktype='detailed')
#create surface plot
persp(x1, x2, y, col = 'blue',
expand=0.8, ticktype='detailed')
View(data_h)
View(data_h@reductions$ica@cell.embeddings)
View(data_h@reductions$ica@cell.embeddings[1])
launchShiny()
data_h@misc[["IC_1"]]$spot_top_genes_weight
View(data_h@misc[["IC_1"]]$spot_top_genes_weight)
IC_C = "IC_1"
p <- pheatmap(data_h@misc[[IC_C]]$spot_top_genes_weight,clustering_method = "ward.D",clustering_distance_cols = "correlation")
data <- data_h
GeneList <- data@misc$GeneAndStat$Contrib_gene[names(which(data@misc$GeneAndStat$Kurtosis_ICs>3))][[IC_C]]
GeneList <- GeneList %>% as.tibble %>%arrange(desc(abs(Sig)))
Gene <- data@reductions$ica@feature.loadings[GeneList$gene,][,IC_C]
Gene
GeneList
data@misc$GeneAndStat$Contrib_gene[names(which(data@misc$GeneAndStat$Kurtosis_ICs>3))]
data@misc[[IC_C]]$IC_top_genes_weight[which(data@misc$GeneAndStat$Kurtosis_ICs>3)]
data@misc[[IC_C]]$IC_top_genes_weight[which(data@misc$GeneAndStat$Kurtosis_ICs>3)]
data@misc[[IC_C]]$IC_top_genes_weight
nb_genes <- 10
table_Gene_IC <- data@misc$GeneAndStat$Contrib_gene[names(which(data@misc$GeneAndStat$Kurtosis_ICs>3))]
View(table_Gene_IC)
GeneList <- GeneList %>% as.tibble %>%arrange(desc(abs(Sig)))
table_Gene_IC <- data@misc$GeneAndStat$Contrib_gene[names(which(data@misc$GeneAndStat$Kurtosis_ICs>3))]
View(table_Gene_IC)
View(data@misc[[IC_C]]$IC_top_genes_weight)
data@reductions$ica@feature.loadings[GeneList$gene,][,IC_C]
GeneList <- data@misc$GeneAndStat$Contrib_gene[names(which(data@misc$GeneAndStat$Kurtosis_ICs>3))][[IC_C]]
GeneList %>% as.tibble %>%arrange(desc(abs(Sig)))
data@reductions$ica@feature.loadings[GeneList$gene,][,IC_C]
table_Gene_IC <- data@misc$GeneAndStat$Contrib_gene[names(which(data@misc$GeneAndStat$Kurtosis_ICs>3))]
table_Gene_IC <- table_Gene_IC %>% as.tibble %>%arrange(desc(abs(Sig)))
View(table_Gene_IC)
table_Gene_IC
data@reductions$ica@feature.loadings[GeneList$gene[1:nb_genes],]
Gene
Gene
names(Gene)
data@reductions$ica@feature.loadings[GeneList$gene[1:nb_genes],]
z[names(Gene),]
z <- data@reductions$ica@feature.loadings[GeneList$gene[1:nb_genes],]
z[names(Gene),]
z[,names(Gene)]
z
z[names(Gene),]
as.data.frame(z)[names(Gene),]
View(as.data.frame(z)[names(Gene),])
names(Gene
)
typeof(names(Gene))
as.list(names(Gene))
names(Gene)
data@reductions$ica@feature.loadings[GeneList$gene,]
data@reductions$ica@feature.loadings[names(Gene),]
p <- pheatmap(z,clustering_method = "ward.D",clustering_distance_cols = "correlation")
nb_genes <- 20
data@reductions$ica@feature.loadings[names(Gene),20]
data@reductions$ica@feature.loadings[names(Gene),]
data@reductions$ica@feature.loadings[names(Gene),][20]
data@reductions$ica@feature.loadings[names(Gene),][20,]
data@reductions$ica@feature.loadings[names(Gene),][,20]
View(data@reductions$ica@feature.loadings[names(Gene),20])
View(data@reductions$ica@feature.loadings[names(Gene),10])
View(data@reductions$ica@feature.loadings[names(Gene),][20])
View(data@reductions$ica@feature.loadings[names(Gene),])
View(head(data@reductions$ica@feature.loadings[names(Gene),],20))
View(head(data@reductions$ica@feature.loadings[names(Gene),],10))
z <- head(data@reductions$ica@feature.loadings[names(Gene),],nb_genes)
p <- pheatmap(z,clustering_method = "ward.D",clustering_distance_cols = "correlation")
row_order <- p[["tree_row"]][["order"]]
data@misc[[IC_C]]$IC_top_genes_weight <- data@misc[[IC_C]]$IC_top_genes_weight[row_order,]
z[row_order,]
launchShiny()
launchShiny()
plot_ly(
x = colnames(z), y = rownames(z),
z = z, type = "heatmap", zmin = input$slider_IC_gene_heatmap_range[1], zmax = input$slider_IC_gene_heatmap_range[2],
colorscale = input$select_color_IC_gene_heatmap,
hovertemplate = paste(
"Gene: %{y:.2f%}<br>",
"IC: %{x:.2f%}<br>",
"Value: %{z:.2f%}",
"<extra></extra>"
)
)
plot_ly(
x = colnames(z), y = rownames(z),
z = z, type = "heatmap",
colorscale = "viridis",
hovertemplate = paste(
"Gene: %{y:.2f%}<br>",
"IC: %{x:.2f%}<br>",
"Value: %{z:.2f%}",
"<extra></extra>"
)
)
z <- z[,col_order]
z[,c("IC_1")]
z[,c("IC_1","IC_2")]
launchShiny()
launchShiny()
launchShiny()
launchShiny()
names(GeneList_heatmap_IC())
names(Gene)
Z
z
launchShiny()
launchShiny()
launchShiny()
data <- readRDS('/home/c_thuilliez/Desktop/Work/output/Spatial_PDX/MAP636_PDX_PT_S19_h/data.RDS')
IC_C = "IC_1"
GeneList <- data@misc$GeneAndStat$Contrib_gene[names(which(data@misc$GeneAndStat$Kurtosis_ICs>3))][[IC_C]]
GeneList <- GeneList %>% as.tibble %>%arrange(desc(abs(Sig)))
Gene <- data@reductions$ica@feature.loadings[GeneList$gene,][,IC_C]
Gene_names <- names(Gene)
z <- head(data@reductions$ica@feature.loadings[Gene_names,],20)
z
p <- pheatmap(z,clustering_method = "ward.D",clustering_distance_cols = "correlation")
row_order <- p[["tree_row"]][["order"]]
z <- z[row_order,]
# only keep IC of interest
z <- z[,head(names(data@misc)[-1],-1)]
plot_ly(
x = colnames(z), y = rownames(z),
z = z, type = "heatmap", zmin = input$slider_IC_gene_heatmap_range[1], zmax = input$slider_IC_gene_heatmap_range[2],
colorscale = input$select_color_IC_gene_heatmap,
hovertemplate = paste(
"Gene: %{y:.2f%}<br>",
"IC: %{x:.2f%}<br>",
"Value: %{z:.2f%}",
"<extra></extra>"
)
)
plot_ly(
x = colnames(z), y = rownames(z),
z = z, type = "heatmap"
hovertemplate = paste(
plot_ly(
x = colnames(z), y = rownames(z),
z = z, type = "heatmap",
hovertemplate = paste(
"Gene: %{y:.2f%}<br>",
"IC: %{x:.2f%}<br>",
"Value: %{z:.2f%}",
"<extra></extra>"
)
)
launchShiny()
launchShiny()
launchShiny()
