# We build the final object
IC_1<-cbind(data_h@images$slice1@coordinates,sum_IC_1) %>% as.tibble
IC_2<-cbind(data_h@images$slice1@coordinates,sum_IC_2) %>% as.tibble
View(sum_IC_1)
View(IC_1)
c <- IC_1["sum_IC_1"]-IC_2["sum_IC_2"]
View(IC_1)
IC_1 = as.data.frame(data_h@reductions$ica@cell.embeddings[,1])
IC_2 = as.data.frame(data_m@reductions$ica@cell.embeddings[,1])
IC_1<-apply(IC_1,2,function(x){x=ifelse(x<=0,0,x); return(x)})
IC_2<-apply(IC_2,2,function(x){x=ifelse(x<=0,0,x); return(x)})
#We normalize by the sum
sum_IC_1<-apply(IC_1,2,function(x){x=x/sum(x); return(x)})
sum_IC_2<-apply(IC_2,2,function(x){x=x/sum(x); return(x)})
#we calculate the factor of size to reduce pie size where IC are low
sum_IC_1=sqrt((rowSums(sum_IC_1)/max(rowSums(sum_IC_1))))
sum_IC_2=sqrt((rowSums(sum_IC_2)/max(rowSums(sum_IC_2))))
sum_IC_1
View(sum_IC_1)
# We build the final object
IC_1<-cbind(data_h@images$slice1@coordinates,IC_1) %>%  cbind(.,sum_IC_1) %>% as.tibble
IC_2<-cbind(data_h@images$slice1@coordinates,IC_2) %>%  cbind(.,sum_IC_2) %>% as.tibble
IC_1 = as.data.frame(data_h@reductions$ica@cell.embeddings[,1])
IC_2 = as.data.frame(data_m@reductions$ica@cell.embeddings[,1])
IC_1<-apply(IC_1,2,function(x){x=ifelse(x<=0,0,x); return(x)})
IC_2<-apply(IC_2,2,function(x){x=ifelse(x<=0,0,x); return(x)})
#We normalize by the sum
sum_IC_1<-apply(IC_1,2,function(x){x=x/sum(x); return(x)})
sum_IC_2<-apply(IC_2,2,function(x){x=x/sum(x); return(x)})
View(sum_IC_1)
IC_1 = as.data.frame(data_h@reductions$ica@cell.embeddings[,1])
IC_2 = as.data.frame(data_m@reductions$ica@cell.embeddings[,1])
IC_1<-apply(IC_1,2,function(x){x=ifelse(x<=0,0,x); return(x)})
IC_2<-apply(IC_2,2,function(x){x=ifelse(x<=0,0,x); return(x)})
#We normalize by the sum
sum_IC_1<-apply(IC_1,2,function(x){x=x/sum(x); return(x)})
sum_IC_2<-apply(IC_2,2,function(x){x=x/sum(x); return(x)})
sum_IC_1 <- unlist(sum_IC_1)
sum_IC_2 <- unlist(sum_IC_2)
# We build the final object
IC_1<-cbind(data_h@images$slice1@coordinates,IC_1) %>%  cbind(.,sum_IC_1) %>% as.tibble
IC_1 = as.data.frame(data_h@reductions$ica@cell.embeddings[,1])
IC_2 = as.data.frame(data_m@reductions$ica@cell.embeddings[,1])
IC_1<-apply(IC_1,2,function(x){x=ifelse(x<=0,0,x); return(x)})
IC_2<-apply(IC_2,2,function(x){x=ifelse(x<=0,0,x); return(x)})
#We normalize by the sum
sum_IC_1<-apply(IC_1,2,function(x){x=x/sum(x); return(x)})
sum_IC_2<-apply(IC_2,2,function(x){x=x/sum(x); return(x)})
sum_IC_1 <- as.double(unlist(sum_IC_1))
sum_IC_2 <- as.double(unlist(sum_IC_2))
# We build the final object
IC_1<-cbind(data_h@images$slice1@coordinates,IC_1) %>%  cbind(.,sum_IC_1) %>% as.tibble
IC_2<-cbind(data_h@images$slice1@coordinates,IC_2) %>%  cbind(.,sum_IC_2) %>% as.tibble
View(IC_1)
c <- IC_1["sum_IC_1"]-IC_2["sum_IC_2"]
IC_All <- IC_1[1:5]
IC_All$All <- unlist(c)
IC_All$cell_names <- rownames(data_h@meta.data)
IC_All$All[which(IC_All$All == Inf | IC_All$All == 0)] <- NaN
#We normalize by the sum
sum <- sum(IC_All$All[!is.nan(IC_All$All)])
for (k in 1:length(IC_All$All)) {
if (!is.nan(IC_All$All[k])) {
IC_All$All[k] <- IC_All$All[k]/sum
}
}
View(IC_All)
View(IC_1)
IC_1 = as.data.frame(data_h@reductions$ica@cell.embeddings[,1])
IC_2 = as.data.frame(data_m@reductions$ica@cell.embeddings[,1])
IC_1<-apply(IC_1,2,function(x){x=ifelse(x<=0,0,x); return(x)})
IC_2<-apply(IC_2,2,function(x){x=ifelse(x<=0,0,x); return(x)})
#We normalize by the sum
sum_IC_1<-apply(IC_1,2,function(x){x=x/sum(x); return(x)})
sum_IC_2<-apply(IC_2,2,function(x){x=x/sum(x); return(x)})
sum_IC_1 <- as.double(unlist(sum_IC_1))
sum_IC_2 <- as.double(unlist(sum_IC_2))
# We build the final object
IC_1<-cbind(data_h@images$slice1@coordinates,IC_1) %>%  cbind(.,sum_IC_1) %>% as.tibble
IC_2<-cbind(data_h@images$slice1@coordinates,IC_2) %>%  cbind(.,sum_IC_2) %>% as.tibble
c <- IC_1["sum_IC_1"]-IC_2["sum_IC_2"]
IC_All <- IC_1[1:5]
IC_All$All <- unlist(c)
IC_All$cell_names <- rownames(data_h@meta.data)
IC_All$All[which(IC_All$All == Inf | IC_All$All == 0)] <- NaN
#We normalize by the sum
sum <- sum(IC_All$All[!is.nan(IC_All$All)])
for (k in 1:length(IC_All$All)) {
if (!is.nan(IC_All$All[k])) {
IC_All$All[k] <- IC_All$All[k]/sum
}
}
View(IC_All)
plotly::plot_ly(type = "scatter", x = as.double(unlist(IC_All$imagecol)),
y = as.double(unlist(IC_All$imagerow)),
text = IC_1$sum_IC_1,
meta = IC_2$sum_IC_2,
marker = list(color = as.double(IC_All$All),showscale = TRUE),
hovertemplate = "Humain : %{text}<br>mice: %{meta}<extra></extra>")
IC_1 = as.data.frame(data_h@reductions$ica@cell.embeddings[,1])
IC_2 = as.data.frame(data_m@reductions$ica@cell.embeddings[,1])
IC_1<-apply(IC_1,2,function(x){x=ifelse(x<=0,0,x); return(x)})
IC_2<-apply(IC_2,2,function(x){x=ifelse(x<=0,0,x); return(x)})
#We normalize by the sum
sum_IC_1<-apply(IC_1,2,function(x){x=x/sum(x); return(x)})
sum_IC_2<-apply(IC_2,2,function(x){x=x/sum(x); return(x)})
sum_IC_1 <- as.double(unlist(sum_IC_1))
sum_IC_2 <- as.double(unlist(sum_IC_2))
# We build the final object
IC_1<-cbind(data_h@images$slice1@coordinates,IC_1) %>%  cbind(.,sum_IC_1) %>% as.tibble
IC_2<-cbind(data_h@images$slice1@coordinates,IC_2) %>%  cbind(.,sum_IC_2) %>% as.tibble
c <- IC_1["sum_IC_1"]/IC_2["sum_IC_2"]
IC_All <- IC_1[1:5]
IC_All$All <- unlist(c)
IC_All$cell_names <- rownames(data_h@meta.data)
IC_All$All[which(IC_All$All == Inf | IC_All$All == 0)] <- NaN
#We normalize by the sum
sum <- sum(IC_All$All[!is.nan(IC_All$All)])
for (k in 1:length(IC_All$All)) {
if (!is.nan(IC_All$All[k])) {
IC_All$All[k] <- IC_All$All[k]/sum
}
}
plotly::plot_ly(type = "scatter", x = as.double(unlist(IC_All$imagecol)),
y = as.double(unlist(IC_All$imagerow)),
text = IC_1$sum_IC_1,
meta = IC_2$sum_IC_2,
marker = list(color = as.double(IC_All$All),showscale = TRUE),
hovertemplate = "Humain : %{text}<br>mice: %{meta}<extra></extra>")
IC_1 = as.data.frame(data_h@reductions$ica@cell.embeddings[,1])
IC_2 = as.data.frame(data_m@reductions$ica@cell.embeddings[,1])
IC_1<-apply(IC_1,2,function(x){x=ifelse(x<=0,0,x); return(x)})
IC_2<-apply(IC_2,2,function(x){x=ifelse(x<=0,0,x); return(x)})
#We normalize by the sum
sum_IC_1<-apply(IC_1,2,function(x){x=x/sum(x); return(x)})
sum_IC_2<-apply(IC_2,2,function(x){x=x/sum(x); return(x)})
#we calculate the factor of size to reduce pie size where IC are low
sum_IC_1=sqrt((rowSums(sum_IC_1)/max(rowSums(sum_IC_1))))
sum_IC_2=sqrt((rowSums(sum_IC_2)/max(rowSums(sum_IC_2))))
# We build the final object
IC_1<-cbind(data_h@images$slice1@coordinates,IC_1) %>%  cbind(.,sum_IC_1) %>% as.tibble
IC_2<-cbind(data_h@images$slice1@coordinates,IC_2) %>%  cbind(.,sum_IC_2) %>% as.tibble
c <- IC_1["sum_IC_1"]/IC_2["sum_IC_2"]
IC_All <- IC_1[1:5]
IC_All$All <- unlist(c)
IC_All$cell_names <- rownames(data_h@meta.data)
IC_All$All[which(IC_All$All == Inf | IC_All$All == 0)] <- NaN
IC_1 = as.data.frame(data_h@reductions$ica@cell.embeddings[,1])
IC_2 = as.data.frame(data_m@reductions$ica@cell.embeddings[,1])
IC_1<-apply(IC_1,2,function(x){x=ifelse(x<=0,0,x); return(x)})
IC_2<-apply(IC_2,2,function(x){x=ifelse(x<=0,0,x); return(x)})
#We normalize by the sum
sum_IC_1<-apply(IC_1,2,function(x){x=x/sum(x); return(x)})
sum_IC_2<-apply(IC_2,2,function(x){x=x/sum(x); return(x)})
sum_IC_1 <- as.double(unlist(sum_IC_1))
sum_IC_2 <- as.double(unlist(sum_IC_2))
# We build the final object
IC_1<-cbind(data_h@images$slice1@coordinates,IC_1) %>%  cbind(.,sum_IC_1) %>% as.tibble
IC_2<-cbind(data_h@images$slice1@coordinates,IC_2) %>%  cbind(.,sum_IC_2) %>% as.tibble
c <- IC_1["sum_IC_1"]/IC_2["sum_IC_2"]
IC_All <- IC_1[1:5]
IC_All$All <- unlist(c)
IC_All$cell_names <- rownames(data_h@meta.data)
IC_All$All[which(IC_All$All == Inf | IC_All$All == 0)] <- NaN
#We normalize by the sum
sum <- sum(IC_All$All[!is.nan(IC_All$All)])
for (k in 1:length(IC_All$All)) {
if (!is.nan(IC_All$All[k])) {
IC_All$All[k] <- IC_All$All[k]/sum
}
}
plotly::plot_ly(type = "scatter", x = as.double(unlist(IC_All$imagecol)),
y = as.double(unlist(IC_All$imagerow)),
text = IC_1$sum_IC_1,
meta = IC_2$sum_IC_2,
marker = list(color = as.double(IC_All$All),showscale = TRUE),
hovertemplate = "Humain : %{text}<br>mice: %{meta}<extra></extra>")
IC_1 = as.data.frame(data_h@reductions$ica@cell.embeddings[,1])
IC_2 = as.data.frame(data_m@reductions$ica@cell.embeddings[,1])
IC_1<-apply(IC_1,2,function(x){x=ifelse(x<=0,0,x); return(x)})
IC_2<-apply(IC_2,2,function(x){x=ifelse(x<=0,0,x); return(x)})
#We normalize by the sum
sum_IC_1<-apply(IC_1,2,function(x){x=x/sum(x); return(x)})
sum_IC_2<-apply(IC_2,2,function(x){x=x/sum(x); return(x)})
sum_IC_1 <- as.double(unlist(sum_IC_1))
sum_IC_2 <- as.double(unlist(sum_IC_2))
# We build the final object
IC_1<-cbind(data_h@images$slice1@coordinates,IC_1) %>%  cbind(.,sum_IC_1) %>% as.tibble
IC_2<-cbind(data_h@images$slice1@coordinates,IC_2) %>%  cbind(.,sum_IC_2) %>% as.tibble
View(IC_1)
View(IC_2)
#we calculate the factor of size to reduce pie size where IC are low
sum_IC_1=(rowSums(sum_IC_1)/max(rowSums(sum_IC_1)))
#we calculate the factor of size to reduce pie size where IC are low
sum_IC_1=(sum(sum_IC_1)/max(sum_IC_1))
sum_IC_1
IC_1 = as.data.frame(data_h@reductions$ica@cell.embeddings[,1])
IC_2 = as.data.frame(data_m@reductions$ica@cell.embeddings[,1])
IC_1<-apply(IC_1,2,function(x){x=ifelse(x<=0,0,x); return(x)})
IC_2<-apply(IC_2,2,function(x){x=ifelse(x<=0,0,x); return(x)})
#We normalize by the sum
sum_IC_1<-apply(IC_1,2,function(x){x=x/sum(x); return(x)})
sum_IC_2<-apply(IC_2,2,function(x){x=x/sum(x); return(x)})
sum_IC_1 <- as.double(unlist(sum_IC_1))
sum_IC_2 <- as.double(unlist(sum_IC_2))
#we calculate the factor of size to reduce pie size where IC are low
sum_IC_1=(sum_IC_1)/max(sum_IC_1)
sum_IC_1
#we calculate the factor of size to reduce pie size where IC are low
sum_IC_1=(sum_IC_1)/max(sum_IC_1)
sum_IC_2=(sum_IC_2)/max(sum_IC_2)
sum_IC_2
# We build the final object
IC_1<-cbind(data_h@images$slice1@coordinates,IC_1) %>%  cbind(.,sum_IC_1) %>% as.tibble
IC_2<-cbind(data_h@images$slice1@coordinates,IC_2) %>%  cbind(.,sum_IC_2) %>% as.tibble
c <- IC_1["sum_IC_1"]/IC_2["sum_IC_2"]
View(c)
IC_All <- IC_1[1:5]
IC_All$All <- unlist(c)
IC_All$cell_names <- rownames(data_h@meta.data)
IC_All$All[which(IC_All$All == Inf | IC_All$All == 0)] <- NaN
plotly::plot_ly(type = "scatter", x = as.double(unlist(IC_All$imagecol)),
y = as.double(unlist(IC_All$imagerow)),
text = IC_1$sum_IC_1,
meta = IC_2$sum_IC_2,
marker = list(color = as.double(IC_All$All),showscale = TRUE),
hovertemplate = "Humain : %{text}<br>mice: %{meta}<extra></extra>")
View(data_h@misc$IC_1$en)
View(data_h@misc$IC_1$en$GO_Biological_Process_2015)
launchShiny()
data <- readRDS('/home/c_thuilliez/Desktop/Work/output/Spatial_PDX/MAP177_PDX_PT_S17_h/data.RDS')
IC_C = "IC_1"
GeneList <- data@misc$GeneAndStat$Contrib_gene[names(which(data@misc$GeneAndStat$Kurtosis_ICs>3))][[IC_C]]
GeneList <- GeneList %>% as.tibble %>%arrange(desc(abs(Sig)))
Gene <- data@reductions$ica@feature.loadings[GeneList$gene,][,IC_C]
Gene_names <- names(Gene)
z <- head(Launch_analysis()@reductions$ica@feature.loadings[Gene_names,],input$select_number_IC_gene_heatmap)
z <- head(data@reductions$ica@feature.loadings[Gene_names,],input$select_number_IC_gene_heatmap)
z <- head(data@reductions$ica@feature.loadings[Gene_names,],20)
p <- pheatmap(z,clustering_method = "ward.D",clustering_distance_cols = "correlation")
row_order <- p[["tree_row"]][["order"]]
z <- z[row_order,]
if (input$IC_gene_column_organization == TRUE){
col_order <- p[["tree_col"]][["order"]]
z <- z[,col_order]
}
# only keep IC of interest
z <- z[,head(names(Launch_analysis()@misc)[-1],-1)]
# only keep IC of interest
z <- z[,head(names(data@misc)[-1],-1)]
View(z)
# only keep IC of interest
z <- z[,head(names(data@misc)[-1],-1)]
head(names(data@misc)[-1],-1)
View(data)
head(names(data@misc)[-1],-2)
# only keep IC of interest
z <- z[,head(names(data@misc)[-1],-2)]
plot_ly(
x = colnames(z), y = rownames(z),
z = z, type = "heatmap", zmin = input$slider_IC_gene_heatmap_range[1], zmax = input$slider_IC_gene_heatmap_range[2],
colorscale = input$select_color_IC_gene_heatmap,
hovertemplate = paste(
"Gene: %{y:.2f%}<br>",
"IC: %{x:.2f%}<br>",
"Value: %{z:.2f%}",
"<extra></extra>"
)
)
plot_ly(
x = colnames(z), y = rownames(z),
z = z, type = "heatmap"
hovertemplate = paste(
plot_ly(
x = colnames(z), y = rownames(z),
z = z, type = "heatmap"
)
launchShiny()
# only keep IC of interest
names(Launch_analysis()@misc)
# only keep IC of interest
names(data@misc)
# only keep IC of interest
startsWith(names(data@misc), "IC")
z <- z[,startsWith(names(data@misc), "IC_")]
startsWith(names(data@misc), "IC_")
launchShiny()
Gene_names <- names(Gene)
z <- head(data@reductions$ica@feature.loadings[Gene_names,],20)
p <- pheatmap(z,clustering_method = "ward.D",clustering_distance_cols = "correlation")
row_order <- p[["tree_row"]][["order"]]
z <- z[row_order,]
z <- z[,startsWith(names(Launch_analysis()@misc), "IC_")]
z <- z[,startsWith(names(data@misc), "IC_")]
startsWith(names(data@misc), "IC_")
View(z)
# only keep IC of interest
names(data@misc)[startsWith(names(data@misc), "IC_")]
z <- z[,names(data@misc)[startsWith(names(data@misc), "IC_")]]
launchShiny()
launchShiny()
table <- data@misc$IC_1$en$GO_Biological_Process_2015
table["Overlap"] <- lapply(table["Overlap"], sub, pattern="/.*", replacement="")
genes <- table["Genes"]
View(genes)
strsplit(genes, split = ";")
for (k in 1:lenth(table["Genes"])) {
strsplit(k, split = ";")
}
for (k in 1:length(table["Genes"])) {
strsplit(k, split = ";")
}
for (k in table["Genes"]) {
strsplit(k, split = ";")
}
for (k in table["Genes"]) {
k <- strsplit(k, split = ";")
}
View(k)
strsplit(table["Genes"], split = ";")
i = 1
i = 1
for (k in table["Genes"]) {
table["Genes"][i] <- strsplit(k, split = ";")
i <- i+1
}
table["Genes"][i]
table["Genes"]
table["Genes"][i]
table["Genes"][,i]
table["Genes"][i,]
k
x <- strsplit(table["Genes"][i,], split = ";")
table["Genes"][i,][1]
View(table)
x <- strsplit(table["Genes"][i,][1], split = ";")
View(x)
x <- strsplit(table["Genes"][i,], split = ";")
View(x)
View(x)
for (k in 1:length(table["Genes"])) {
x <- strsplit(table["Genes"][i,][1], split = ";")
x <- paste(x,sep="<br>")
i <- i+1
}
x
number_of_genes <- table["Overlap"]
table["Overlap"] <- lapply(table["Overlap"], sub, pattern="/.*", replacement="")
genes <- table["Genes"]
i = 1
for (k in 1:length(table["Genes"])) {
x <- strsplit(table["Genes"][i,][1], split = ";")
x <- paste(x,sep="<br>")
i <- i+1
}
x <- paste(x[1],sep="<br>")
i = 1
for (k in 1:length(table["Genes"])) {
x <- strsplit(table["Genes"][i,][1], split = ";")
x <- paste(x[1],collapse = "<br>")
i <- i+1
}
number_of_genes <- table["Overlap"]
table["Overlap"] <- lapply(table["Overlap"], sub, pattern="/.*", replacement="")
number_enrichr <- input$enrichment_disp_number
genes <- table["Genes"]
i = 1
for (k in 1:length(table["Genes"])) {
x <- strsplit(table["Genes"][i,][1], split = ";")
x <- paste(x[1],collapse = "<br>")
i <- i+1
}
x <- table["Overlap"][1:number_enrichr,]
x <- paste(x,collapse = "<br>")
x <- strsplit(table["Genes"][i,][1], split = ";")
View(x)
x <- unlist(strsplit(table["Genes"][i,][1], split = ";"))
x
x <- paste(x,collapse = "<br>")
number_of_genes <- table["Overlap"]
number_enrichr <- input$enrichment_disp_number
genes <- table["Genes"]
i = 1
for (k in 1:length(table["Genes"])) {
u <- unlist(strsplit(table["Genes"][i,][1], split = ";"))
u <- paste(u,collapse = "<br>")
table["Genes"][k] <- u
i <- i+1
}
table
launchShiny()
launchShiny()
u <- unlist(strsplit(table["Genes"][i,][1], split = ";"))
number_of_genes <- table["Overlap"]
table["Overlap"] <- lapply(table["Overlap"], sub, pattern="/.*", replacement="")
number_enrichr <- input$enrichment_disp_number
View(data)
table <- data@misc[["IC_1"]][["en"]][["GO_Biological_Process_2015"]]
number_of_genes <- table["Overlap"]
table["Overlap"] <- lapply(table["Overlap"], sub, pattern="/.*", replacement="")
number_enrichr <- input$enrichment_disp_number
# create list of genes
i = 1
u <- unlist(strsplit(table["Genes"][i,][1], split = ";"))
gene_text = c()
# create list of genes
i = 1
gene_text = c()
for (k in 1:length(table["Genes"])) {
u <- unlist(strsplit(table["Genes"][i,][1], split = ";"))
gene_text <- append(gene_text,u[i])
if i.isMultiple(of: 5) {
for (k in 1:length(table["Genes"])) {
u <- unlist(strsplit(table["Genes"][i,][1], split = ";"))
gene_text <- append(gene_text,u[i])
if (i.isMultiple(of: 5)) {
gene_text <- append(gene_text,"<br>")
}
u <- paste(u,collapse = ",")
table["Genes"][k] <- u
i <- i+1
}
gene_text = c()
# create list of genes
i = 1
gene_text = c()
for (k in 1:length(table["Genes"])) {
u <- unlist(strsplit(table["Genes"][i,][1], split = ";"))
gene_text <- append(gene_text,u[i])
if (i %% 5 == 0) {
gene_text <- append(gene_text,"<br>")
}
u <- paste(u,collapse = ",")
table["Genes"][k] <- u
i <- i+1
}
u
i %% 5
table["Genes"]
length(table["Genes"])
length(table["Genes"][1,])
length(table)
length(rownames(table))
# create list of genes
i = 1
gene_text = c()
for (k in 1:length(rownames(table))) {
u <- unlist(strsplit(table["Genes"][i,][1], split = ";"))
gene_text <- append(gene_text,u[i])
if (i %% 5 == 0) {
gene_text <- append(gene_text,"<br>")
}
u <- paste(u,collapse = ",")
table["Genes"][k] <- u
i <- i+1
}
table <- data@misc[["IC_1"]][["en"]][["GO_Biological_Process_2015"]]
number_of_genes <- table["Overlap"]
table["Overlap"] <- lapply(table["Overlap"], sub, pattern="/.*", replacement="")
number_enrichr <- input$enrichment_disp_number
# create list of genes
i = 1
gene_text = c()
for (k in 1:length(rownames(table))) {
u <- unlist(strsplit(table["Genes"][i,][1], split = ";"))
gene_text <- append(gene_text,u[i])
if (i %% 5 == 0) {
gene_text <- append(gene_text,"<br>")
}
u <- paste(u,collapse = ",")
table["Genes"][k] <- u
i <- i+1
}
table["Genes"][k,]
table["Genes"][k]
table <- data@misc[["IC_1"]][["en"]][["GO_Biological_Process_2015"]]
# create list of genes
for (k in 1:length(rownames(table))) {
gene_text = c()
u <- unlist(strsplit(table["Genes"][k,][1], split = ";"))
for (v in 1:length(u)) {
gene_text <- append(gene_text,u[v])
if (v %% 5 == 0) {
gene_text <- append(gene_text,"<br>")
}
}
u <- paste(u,collapse = ",")
table["Genes"][k,] <- u
}
genes <- table["Genes"]
genes
View(genes)
table
View(table)
table <- data@misc[["IC_1"]][["en"]][["GO_Biological_Process_2015"]]
# create list of genes
for (k in 1:length(rownames(table))) {
gene_text = c()
u <- unlist(strsplit(table["Genes"][k,][1], split = ";"))
for (v in 1:length(u)) {
gene_text <- append(gene_text,u[v])
if (v %% 5 == 0) {
gene_text <- append(gene_text,"<br>")
}
}
u <- paste(gene_text,collapse = ",")
table["Genes"][k,] <- u
}
table
View(table)
launchShiny()
launchShiny()
