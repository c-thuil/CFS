updateProgress <- function(value = NULL, detail = NULL) {
if (is.null(value)) {
value <- progress$getValue()
value <- value + (progress$getMax() - value) / 5
}
progress$set(value = value, detail = detail)
}
# Compute the new data, and pass in the updateProgress function so
# that it can update the progress indicator.
compute_data(updateProgress)
})
}
ui <- shinyUI(basicPage(
tableOutput('table'),
actionButton('goTable', 'Go table')
))
shinyApp(ui = ui, server = server)
launchShiny()
data <- readRDS("/home/c_thuilliez/Desktop/data.RDS")
View(data)
launchShiny()
data <- readRDS("/home/c_thuilliez/Desktop/data.RDS")
View(data)
launchShiny()
launchShiny()
data = readRDS("/home/c_thuilliez/Desktop/data.RDS")
View(data)
SpatialDimPlot(data)
SpatialDimPlot(data)
launchShiny <- function(
mode = "open",
maxFileSize = 15000,
file_to_load = NULL,
welcome_message = NULL,
projections_show_hover_info = TRUE,
...
){
##--------------------------------------------------------------------------##
## Create global variable with options that need to be available inside the
## Shiny app.
##--------------------------------------------------------------------------##
Shiny.options <<- list(
"mode" = mode,
"file_to_load" = file_to_load,
"welcome_message" = welcome_message,
"shiny_root" = "/home/c_thuilliez/Desktop/scRNAS_CT/Shiny/",
"projections_show_hover_info" = projections_show_hover_info
)
##--------------------------------------------------------------------------##
## Allow upload of files up to 800 MB.
##--------------------------------------------------------------------------##
options(shiny.maxRequestSize = maxFileSize * 1024^2)
##--------------------------------------------------------------------------##
## Load server and UI functions.
##--------------------------------------------------------------------------##
source(
"/home/c_thuilliez/Desktop/scRNAS_CT/Shiny/shiny_UI.R",
local = TRUE
)
source(
"/home/c_thuilliez/Desktop/scRNAS_CT/Shiny/shiny_server.R",
local = TRUE
)
##--------------------------------------------------------------------------##
## Launch Shiny.
##--------------------------------------------------------------------------##
message(
paste0(
'##---------------------------------------------------------------------------##\n',
'## Launching Shiny\n',
'##---------------------------------------------------------------------------##'
)
)
shiny::shinyApp(
ui = ui,
server = server,
...
)
}
launchShiny <- function(
mode = "open",
maxFileSize = 15000,
file_to_load = NULL,
welcome_message = NULL,
projections_show_hover_info = TRUE,
...
){
##--------------------------------------------------------------------------##
## Create global variable with options that need to be available inside the
## Shiny app.
##--------------------------------------------------------------------------##
Shiny.options <<- list(
"mode" = mode,
"file_to_load" = file_to_load,
"welcome_message" = welcome_message,
"shiny_root" = "/home/c_thuilliez/Desktop/scRNAS_CT/Shiny/",
"projections_show_hover_info" = projections_show_hover_info
)
##--------------------------------------------------------------------------##
## Allow upload of files up to 800 MB.
##--------------------------------------------------------------------------##
options(shiny.maxRequestSize = maxFileSize * 1024^2)
##--------------------------------------------------------------------------##
## Load server and UI functions.
##--------------------------------------------------------------------------##
source(
"/home/c_thuilliez/Desktop/scRNAS_CT/Shiny/shiny_UI.R",
local = TRUE
)
source(
"/home/c_thuilliez/Desktop/scRNAS_CT/Shiny/shiny_server.R",
local = TRUE
)
##--------------------------------------------------------------------------##
## Launch Shiny.
##--------------------------------------------------------------------------##
message(
paste0(
'##---------------------------------------------------------------------------##\n',
'## Launching Shiny\n',
'##---------------------------------------------------------------------------##'
)
)
shiny::shinyApp(
ui = ui,
server = server,
...
)
}
launchShiny()
launchShiny()
launchShiny()
launchShiny()
launchShiny()
data = readRDS('/home/c_thuilliez/Desktop/Work/output/Spatial_PDX/MAP177_PDX_PT_S17_h/data.RDS')
type = c('IC_1','IC_2')
l=length(type)
ic_types=values$UMAP@reductions$ica@cell.embeddings[,type]
ic_types=data@reductions$ica@cell.embeddings[,type]
ic_types<-apply(ic_types,2,function(x){x=ifelse(x<=0,0,x); return(x)})
sum_IC<-apply(ic_types,2,function(x){x=x/sum(x); return(x)})
sum_IC=sqrt((rowSums(sum_IC)/max(rowSums(sum_IC))))
ic_types<-apply(ic_types,1,function(x){x/sum(x); return(x)})
ic_types<-cbind(values$UMAP@reductions$umap@cell.embeddings,t(ic_types)) %>%  cbind(.,sum_IC)
ic_types<-cbind(data@reductions$umap@cell.embeddings,t(ic_types)) %>%  cbind(.,sum_IC)
grid=interp(ic_types[,'UMAP_1'],ic_types[,'UMAP_2'],ic_types[,'sum_IC'])
griddf <- data.frame(x = rep(grid$x, ncol(grid$z)),
y = rep(grid$y, each = nrow(grid$z)),
z = as.numeric(grid$z))
griddf$z2=ifelse(griddf$z<quantile(griddf$z,na.rm = TRUE,probs = seq(0, 1, 1/10))[2],0,griddf$z)
# Create plotly object
fig <- plot_ly(type = 'scatter',
mode='markers'
)
ic_types
launchShiny()
library(corrr)
install.packages('corrr')
View(data)
threshold
threshold = 0.4
subset(
data,
score.threshold = threshold
)
subset(
data
)
coordinates <- GetTissueCoordinates(object = data, scale = NULL, cols = NULL)
coordinates
cells <- cells[cells %in% rownames(x = coordinates)]
type = c('IC_1','IC_2')
l=length(type)
ic_types=values$data@reductions$ica@cell.embeddings[,type]
ic_types=data@reductions$ica@cell.embeddings[,type]
ic_types<-apply(ic_types,2,function(x){x=ifelse(x<=0,0,x); return(x)})
sum_IC<-apply(ic_types,2,function(x){x=x/sum(x); return(x)})
sum_IC=sqrt((rowSums(sum_IC)/max(rowSums(sum_IC))))
ic_types<-apply(ic_types,1,function(x){x/sum(x); return(x)})
ic_types<-cbind(GetTissueCoordinates(data),t(ic_types)) %>%  cbind(.,sum_IC)
grid=interp(ic_types$imagecol,ic_types$imagerow,ic_types$sum_IC)
griddf <- data.frame(x = rep(grid$x, ncol(grid$z)),
y = rep(grid$y, each = nrow(grid$z)),
z = as.numeric(grid$z))
griddf$z2=ifelse(griddf$z<quantile(griddf$z,na.rm = TRUE,probs = seq(0, 1, 1/10))[2],0,griddf$z)
griddf
# filter object
coordinates <- GetTissueCoordinates(object = data, scale = NULL, cols = NULL)
coordinates
l=length(type)
ic_types=values$data@reductions$ica@cell.embeddings[,type]
ic_types=data@reductions$ica@cell.embeddings[,type]
ic_types<-apply(ic_types,2,function(x){x=ifelse(x<=0,0,x); return(x)})
sum_IC<-apply(ic_types,2,function(x){x=x/sum(x); return(x)})
sum_IC=sqrt((rowSums(sum_IC)/max(rowSums(sum_IC))))
ic_types<-apply(ic_types,1,function(x){x/sum(x); return(x)})
ic_types<-cbind(GetTissueCoordinates(data, scale = NULL, cols = NULL),t(ic_types)) %>%  cbind(.,sum_IC)
grid=interp(ic_types$imagecol,ic_types$imagerow,ic_types$sum_IC)
griddf <- data.frame(x = rep(grid$x, ncol(grid$z)),
y = rep(grid$y, each = nrow(grid$z)),
z = as.numeric(grid$z))
griddf$z2=ifelse(griddf$z<quantile(griddf$z,na.rm = TRUE,probs = seq(0, 1, 1/10))[2],0,griddf$z)
griddf
ic_types
View(ic_types)
View(griddf)
as.tibble(ic_types)
View(as.tibble(ic_types))
ic_types=values$data@reductions$ica@cell.embeddings[,type]
ic_types=data@reductions$ica@cell.embeddings[,type]
ic_types<-apply(ic_types,2,function(x){x=ifelse(x<=0,0,x); return(x)})
sum_IC<-apply(ic_types,2,function(x){x=x/sum(x); return(x)})
sum_IC=sqrt((rowSums(sum_IC)/max(rowSums(sum_IC))))
ic_types<-apply(ic_types,1,function(x){x/sum(x); return(x)})
ic_types<-cbind(GetTissueCoordinates(data),t(ic_types)) %>%  cbind(.,sum_IC) %>% as.tibble()
ic_types
View(as.tibble(ic_types))
ic_types %>% arrange(imagerow)
ic_types = ic_types %>% arrange(imagerow)
ic_types = ic_types %>% arrange(imagecol)
ic_types
ic_types=data@reductions$ica@cell.embeddings[,type]
ic_types<-apply(ic_types,2,function(x){x=ifelse(x<=0,0,x); return(x)})
sum_IC<-apply(ic_types,2,function(x){x=x/sum(x); return(x)})
sum_IC=sqrt((rowSums(sum_IC)/max(rowSums(sum_IC))))
ic_types<-apply(ic_types,1,function(x){x/sum(x); return(x)})
ic_types<-cbind(GetTissueCoordinates(data, scale = NULL, cols = NULL),t(ic_types)) %>%  cbind(.,sum_IC)
ic_types
grid=interp(ic_types$imagecol,ic_types$imagerow,ic_types$sum_IC)
griddf <- data.frame(x = rep(grid$x, ncol(grid$z)),
y = rep(grid$y, each = nrow(grid$z)),
z = as.numeric(grid$z))
griddf
arrange(ic_types,imagerow)
ic_types = arrange(ic_types,imagerow)
ic_types = arrange(ic_types,imagecol)
griddf
View(griddf)
View(ic_types)
ic_types = arrange(ic_types,imagecol)
ic_types = arrange(ic_types,imagerow)
View(ic_types)
ic_types$cell_names = rownames(ic_types)
ic_types
grid=interp(ic_types$imagecol,ic_types$imagerow,ic_types$sum_IC)
griddf <- data.frame(x = rep(grid$x, ncol(grid$z)),
y = rep(grid$y, each = nrow(grid$z)),
z = as.numeric(grid$z))
griddf$z2=ifelse(griddf$z<quantile(griddf$z,na.rm = TRUE,probs = seq(0, 1, 1/10))[2],0,griddf$z)
griddf
grid
griddf$z2
griddf
griddf[griddf$z2 > 0.3]
griddf$z2 > 0.3
griddf[,griddf$z2 > 0.3]
griddf[griddf$z2 > 0.3,]
plot(griddf[griddf$z2 > 0.3,])
plot(griddf[griddf$z2 > 0.3,])
launchShiny()
launchShiny()
launchShiny()
launchShiny()
launchShiny()
library(shinyalert)
install.packages('shinyalert')
library(shinyalert)
launchShiny()
launchShiny <- function(
mode = "open",
maxFileSize = 15000,
file_to_load = NULL,
welcome_message = NULL,
projections_show_hover_info = TRUE,
...
){
##--------------------------------------------------------------------------##
## Create global variable with options that need to be available inside the
## Shiny app.
##--------------------------------------------------------------------------##
Shiny.options <<- list(
"mode" = mode,
"file_to_load" = file_to_load,
"welcome_message" = welcome_message,
"shiny_root" = "/home/c_thuilliez/Desktop/scRNAS_CT/Shiny/",
"projections_show_hover_info" = projections_show_hover_info
)
##--------------------------------------------------------------------------##
## Allow upload of files up to 800 MB.
##--------------------------------------------------------------------------##
options(shiny.maxRequestSize = maxFileSize * 1024^2)
##--------------------------------------------------------------------------##
## Load server and UI functions.
##--------------------------------------------------------------------------##
source(
"/home/c_thuilliez/Desktop/scRNAS_CT/Shiny/shiny_UI.R",
local = TRUE
)
source(
"/home/c_thuilliez/Desktop/scRNAS_CT/Shiny/shiny_server.R",
local = TRUE
)
##--------------------------------------------------------------------------##
## Launch Shiny.
##--------------------------------------------------------------------------##
message(
paste0(
'##---------------------------------------------------------------------------##\n',
'## Launching Shiny\n',
'##---------------------------------------------------------------------------##'
)
)
shiny::shinyApp(
ui = ui,
server = server,
...
)
}
launchShiny()
rownames(data@misc$annotation)[grep(type1, data@misc$annotation)-length(data@misc$annotation[,'Use'])]
data = readRDS('/home/c_thuilliez/Desktop/Work/output/Spatial_PDX/MAP177_PDX_PT_S17_h/data.RDS')
rownames(data@misc$annotation)[grep(type1, data@misc$annotation)-length(data@misc$annotation[,'Use'])]
type1 = 'fibroblast'
rownames(data@misc$annotation)[grep(type1, data@misc$annotation)-length(data@misc$annotation[,'Use'])]
values = list()
values$Annotation = data@misc$annotation
# Get All annotations and their associated ICs
list_names_IC = str_split(values$Annotation[,"Type"], pattern = ',', n = Inf, simplify = FALSE)
View(list_names_IC)
for (i in 1:length(values$IC_names)) {
for (j in 1:length(list_names_IC[[i]])) {
if(!is.null(values$annotation_for_output[[list_names_IC[[i]][j]]])){
values$annotation_for_output[[list_names_IC[[i]][j]]] = append(values$annotation_for_output[[list_names_IC[[i]][j]]], c(values$IC_names[i]))
values$annotation_for_output[[list_names_IC[[i]][j]]] = unique(values$annotation_for_output[[list_names_IC[[i]][j]]])
} else {
values$annotation_for_output[[list_names_IC[[i]][j]]] = c(values$IC_names[i])
}
}
}
for (i in 1:length(values$IC_names)) {
for (j in 1:length(list_names_IC[[i]])) {
if(!is.null(values$annotation_for_output[[list_names_IC[[i]][j]]])){
values$annotation_for_output[[list_names_IC[[i]][j]]] = append(values$annotation_for_output[[list_names_IC[[i]][j]]], c(values$IC_names[i]))
values$annotation_for_output[[list_names_IC[[i]][j]]] = unique(values$annotation_for_output[[list_names_IC[[i]][j]]])
} else {
values$annotation_for_output[[list_names_IC[[i]][j]]] = c(values$IC_names[i])
}
}
}
grep("IC_",names(data@misc))
names(data@misc)[grep("IC_",names(data@misc))]
values$IC_names = names(data@misc)[grep("IC_",names(data@misc))]
for (i in 1:length(values$IC_names)) {
for (j in 1:length(list_names_IC[[i]])) {
if(!is.null(values$annotation_for_output[[list_names_IC[[i]][j]]])){
values$annotation_for_output[[list_names_IC[[i]][j]]] = append(values$annotation_for_output[[list_names_IC[[i]][j]]], c(values$IC_names[i]))
values$annotation_for_output[[list_names_IC[[i]][j]]] = unique(values$annotation_for_output[[list_names_IC[[i]][j]]])
} else {
values$annotation_for_output[[list_names_IC[[i]][j]]] = c(values$IC_names[i])
}
}
}
values$annotation_for_output
rownames(data@misc$annotation)[grep(type1, data@misc$annotation)-length(data@misc$annotation[,'Use'])]
annotation_for_output
values$annotation_for_output
values$IC_names
list_names_IC
i = 1
list_names_IC[[i]]
list_names_IC
list_names_IC
list_names_IC
for (i in 1:length(list_names_IC)) {
list_annotation = list_names_IC[[i]]
for (j in list_annotation) {
if(!is.null(values$annotation_for_output[[j]])){
values$annotation_for_output[[j]] = rownames(data@misc$annotation)[grep(type1, data@misc$annotation)-length(data@misc$annotation[,'Use'])]
} else {
values$annotation_for_output[[j]] = rownames(data@misc$annotation)[grep(type1, data@misc$annotation)-length(data@misc$annotation[,'Use'])]
}
}
}
values$annotation_for_output
for (i in 1:length(list_names_IC)) {
list_annotation = list_names_IC[[i]]
for (j in list_annotation) {
if(!is.null(values$annotation_for_output[[j]])){
values$annotation_for_output[[j]] = rownames(data@misc$annotation)[grep(j, data@misc$annotation)-length(data@misc$annotation[,'Use'])]
} else {
values$annotation_for_output[[j]] = rownames(data@misc$annotation)[grep(j, data@misc$annotation)-length(data@misc$annotation[,'Use'])]
}
}
}
values$annotation_for_output = NULL
for (i in 1:length(list_names_IC)) {
list_annotation = list_names_IC[[i]]
for (j in list_annotation) {
if(!is.null(values$annotation_for_output[[j]])){
values$annotation_for_output[[j]] = rownames(data@misc$annotation)[grep(j, data@misc$annotation)-length(data@misc$annotation[,'Use'])]
} else {
values$annotation_for_output[[j]] = rownames(data@misc$annotation)[grep(j, data@misc$annotation)-length(data@misc$annotation[,'Use'])]
}
}
}
list_annotation
rownames(data@misc$annotation)[grep(j, data@misc$annotation)-length(data@misc$annotation[,'Use'])]
rownames(data@misc$annotation)[grep("", data@misc$annotation)-length(data@misc$annotation[,'Use'])]
rownames(data@misc$annotation)[grep("fibro", data@misc$annotation)-length(data@misc$annotation[,'Use'])]
for (i in 1:length(list_names_IC)) {
list_annotation = list_names_IC[[i]]
for (j in list_annotation) {
if(is.null(values$annotation_for_output[[j]] && j != "")){
values$annotation_for_output[[j]] = rownames(data@misc$annotation)[grep(j, data@misc$annotation)-length(data@misc$annotation[,'Use'])]
}
}
}
for (i in 1:length(list_names_IC)) {
list_annotation = list_names_IC[[i]]
for (j in list_annotation) {
if(is.null(values$annotation_for_output[[j]] & j != "")){
values$annotation_for_output[[j]] = rownames(data@misc$annotation)[grep(j, data@misc$annotation)-length(data@misc$annotation[,'Use'])]
}
}
}
for (i in 1:length(list_names_IC)) {
list_annotation = list_names_IC[[i]]
for (j in list_annotation) {
if(is.null(values$annotation_for_output[[j]]) && j != ""){
values$annotation_for_output[[j]] = rownames(data@misc$annotation)[grep(j, data@misc$annotation)-length(data@misc$annotation[,'Use'])]
}
}
}
list_annotation
values$annotation_for_output
values$annotation_for_output = NULL
values$annotation_for_output
# Get All annotations and their associated ICs
list_names_IC = str_split(values$Annotation[,"Type"], pattern = ',', n = Inf, simplify = FALSE)
for (i in 1:length(list_names_IC)) {
list_annotation = list_names_IC[[i]]
for (j in list_annotation) {
if(is.null(values$annotation_for_output[[j]]) && j != ""){
values$annotation_for_output[[j]] = rownames(data@misc$annotation)[grep(j, data@misc$annotation)-length(data@misc$annotation[,'Use'])]
}
}
}
values$annotation_for_output
for (i in 1:length(list_names_IC)) {
list_annotation = list_names_IC[[i]]
for (j in list_annotation) {
if(is.null(values$annotation_for_output[[j]]) && j != ""){
values$annotation_for_output[[j]] = rownames(data@misc$annotation)[grep(j, data@misc$annotation)-length(data@misc$annotation[,'Use'])]
}
}
}
values$annotation_for_output
values$annotation_for_output = NULL
values$annotation_for_output
for (i in 1:length(list_names_IC)) {
list_annotation = list_names_IC[[i]]
for (j in list_annotation) {
if(is.null(values$annotation_for_output[[j]]) && j != ""){
values$annotation_for_output[[j]] = rownames(data@misc$annotation)[grep(j, data@misc$annotation)-length(data@misc$annotation[,'Use'])]
}
}
}
values$annotation_for_output
list_names_IC
launchShiny()
View(data)
data@misc$annotation
launchShiny()
launchShiny()
readRDS('/home/c_thuilliez/Desktop/Work/output/Spatial_PDX/MAP177_PDX_PT_S17_h/data.RDS')
data2 = readRDS('/home/c_thuilliez/Desktop/Work/output/Spatial_PDX/MAP177_PDX_PT_S17_h/data.RDS')
View(data2)
values$data = data
if(!exists("values$data@misc$annotation")){
print('yes')
}
if(!exists("values$data@misc$annotation")){ print('Yes') }
values$data
View(data)
!exists("values$data@misc$annotation")
!exists(values$data@misc$annotation)
!exists("values$data@misc$annotation")
exists("values$data@misc$annotation")
View(data)
exists("data@misc[["annotation"]]")
exists("data@misc[['annotation']]")
!exists("data@misc[['annotation']]")
data@misc[['annotation']]
exists("values$data@misc$annotation")
values$data@misc$annotation
exists("values$data@misc$annotation")
values$Annotation = values$data@misc$annotation
!exists("values$data@misc$annotation")
exists("values$data@misc$annotation")
launchShiny()
!exists("values$data@misc$annotation")
exists("values$data@misc$annotation")
data2 = readRDS('/home/c_thuilliez/Desktop/Work/output/Spatial_PDX/MAP177_PDX_PT_S17_m/data.RDS')
exists("data2@misc$annotation")
exists("data@misc$annotation")
is.null(data@misc$annotation)
is.null(data2@misc$annotation)
is.null("values$data@misc$annotation")
is.null("data2@misc$annotation")
is.null(data2@misc$annotation)
is.null(data@misc$annotation)
launchShiny()
